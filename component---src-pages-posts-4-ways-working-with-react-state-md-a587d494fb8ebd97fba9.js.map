{"version":3,"sources":["webpack:///./src/pages/posts/4-ways-working-with-react-state.md"],"names":["_frontmatter","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mQAKO,IAAMA,EAAe,CAC1B,MAAS,yDACT,YAAe,6FACf,KAAQ,2BACR,WAAc,GACd,SAAY,GACZ,KAAQ,CAAC,UAQLC,EAAc,CAClBD,gBAEIE,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,kFACA,uBAAG,mCAAKC,WAAW,KAAQ,CACvB,IAAO,gEACP,IAAO,SAEX,yCAAsB,iCAAGA,WAAW,KAAQ,CACxC,KAAQ,iCADU,cAAtB,IAE4B,iCAAGA,WAAW,KAAQ,CAC9C,KAAQ,kHADgB,kEAF5B,KAKA,yGAAsF,oCAAMA,WAAW,KAAQ,CAC3G,UAAa,kBADqE,SAAtF,KAGA,oMACA,qDACA,uHAAoG,oCAAMA,WAAW,KAAQ,CACzH,UAAa,kBADmF,SAApG,2BAEiD,oCAAMA,WAAW,KAAQ,CACtE,UAAa,kBADgC,QAFjD,iBAIsC,oCAAMA,WAAW,KAAQ,CAC3D,UAAa,kBADqB,SAJtC,OAM6B,oCAAMA,WAAW,KAAQ,CAClD,UAAa,kBADY,SAN7B,yCASA,6BAAU,iCAAGA,WAAW,KAAQ,CAC5B,KAAQ,qEADF,sBAAV,MAGA,gCACE,mBAAGA,WAAW,cAAd,sBAAkD,oCAAMA,WAAW,KAAQ,CACvE,UAAa,kBADiC,cAAlD,4BAEuD,oCAAMA,WAAW,KAAQ,CAC5E,UAAa,kBADsC,cAFvD,+DAI0F,oBAAIA,WAAW,MAJzG,+BAKuB,oCAAMA,WAAW,KAAQ,CAC5C,UAAa,kBADM,cALvB,+BASF,kCACA,uBAAG,oCAAMA,WAAW,KAAQ,CACxB,UAAa,kBADd,YAAH,+EAEwG,oCAAMA,WAAW,KAAQ,CAC7H,UAAa,kBADuF,SAFxG,8CAIoE,oCAAMA,WAAW,KAAQ,CACzF,UAAa,kBADmD,YAJpE,IAM6B,oBAAIA,WAAW,MAN5C,+BAOyB,oCAAMA,WAAW,KAAQ,CAC9C,UAAa,kBADQ,yBAPzB,qDAS2F,oCAAMA,WAAW,KAAQ,CAChH,UAAa,kBAD0E,OAT3F,yHAW6I,oBAAIA,WAAW,MAX5J,gJAaA,6EAA0D,oCAAMA,WAAW,KAAQ,CAC/E,UAAa,kBADyC,SAA1D,KAGA,mDACA,uBAAG,oCAAMA,WAAW,KAAQ,CACxB,UAAa,kBADd,iBAAH,8MAGA,iDACA,gCACE,mBAAGA,WAAW,cAAd,2DAAuF,oCAAMA,WAAW,KAAQ,CAC5G,UAAa,kBADsE,mBAAvF,oDAEoF,oCAAMA,WAAW,KAAQ,CACzG,UAAa,kBADmE,SAFpF,uBAI6C,oCAAMA,WAAW,KAAQ,CAClE,UAAa,kBAD4B,SAJ7C,IAM0B,oBAAIA,WAAW,MANzC,oHAO4G,oCAAMA,WAAW,KAAQ,CACjI,UAAa,kBAD2F,SAP5G,MAWF,kEAA+C,oCAAMA,WAAW,KAAQ,CACpE,UAAa,kBAD8B,kBAA/C,+DAGA,wDACA,wBACE,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,kBAGpB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,mGADQ,iBAGpB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,mBAGpB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,iBAItB,mDACA,qCAAkB,oCAAMA,WAAW,KAAQ,CACvC,UAAa,kBADC,iBAAlB,oGAEkI,oBAAIA,WAAW,MAFjJ,mCAIA,gDACA,gCACE,mBAAGA,WAAW,cAAd,0BAAsD,oCAAMA,WAAW,KAAQ,CAC3E,UAAa,kBADqC,mBAAtD,6DAE6F,oCAAMA,WAAW,KAAQ,CAClH,UAAa,kBAD4E,UAF7F,sBAI6C,oCAAMA,WAAW,KAAQ,CAClE,UAAa,kBAD4B,sBAJ7C,MAQF,wEAAqD,oCAAMA,WAAW,KAAQ,CAC1E,UAAa,kBADoC,iBAArD,iCAGA,wBACE,oBAAIA,WAAW,MAAf,0DACA,oBAAIA,WAAW,MAAf,+BAEF,iGACA,oDAAiC,oCAAMA,WAAW,KAAQ,CACtD,UAAa,kBADgB,SAAjC,4BAEkD,oCAAMA,WAAW,KAAQ,CACvE,UAAa,kBADiC,gBAFlD,sCAImE,oCAAMA,WAAW,KAAQ,CACxF,UAAa,kBADkD,SAJnE,uBAM6C,oCAAMA,WAAW,KAAQ,CAClE,UAAa,kBAD4B,mBAN7C,oCAQoE,oCAAMA,WAAW,KAAQ,CACzF,UAAa,kBADmD,iBARpE,0FAWA,sGAAmF,oCAAMA,WAAW,KAAQ,CACxG,UAAa,kBADkE,SAAnF,6GAGA,yDACA,uBAAG,iCAAGA,WAAW,KAAQ,CACrB,KAAQ,mDADT,uBAAH,0HAE2J,iCAAGA,WAAW,KAAQ,CAC7K,KAAQ,sDAD+I,SAF3J,KAKA,sCACA,gCACE,mBAAGA,WAAW,cAAd,aAAyC,oCAAMA,WAAW,KAAQ,CAC9D,UAAa,kBADwB,SAAzC,cAEoC,iCAAGA,WAAW,KAAQ,CACtD,KAAQ,sEADwB,UAFpC,IAIwB,oCAAMA,WAAW,KAAQ,CAC7C,UAAa,kBADO,uBAJxB,sBAM0D,oCAAMA,WAAW,KAAQ,CAC/E,UAAa,kBADyC,iBAN1D,oHAUF,6CAA0B,oCAAMA,WAAW,KAAQ,CAC/C,UAAa,kBADS,uBAA1B,0FAE8H,oCAAMA,WAAW,KAAQ,CACnJ,UAAa,kBAD6G,WAF9H,uBAI+C,iCAAGA,WAAW,KAAQ,CACjE,KAAQ,sEADmC,gEAJ/C,KAOA,kDACA,kFAA+D,iCAAGA,WAAW,KAAQ,CACjF,KAAQ,6CADmD,gBAA/D,8DAGA,+DAA4C,oCAAMA,WAAW,KAAQ,CACjE,UAAa,kBAD2B,OAA5C,KAGA,qDAAkC,oCAAMA,WAAW,KAAQ,CACvD,UAAa,kBADiB,aAAlC,KAGA,wBACE,oBAAIA,WAAW,MAAf,eAAoC,oCAAMA,WAAW,MAAS,CAC1D,UAAa,kBADmB,aAApC,KAGA,oBAAIA,WAAW,MAAf,iBAAsC,oCAAMA,WAAW,MAAS,CAC5D,UAAa,kBADqB,SAAtC,mBAEyC,oCAAMA,WAAW,MAAS,CAC/D,UAAa,kBADwB,OAFzC,MAI0B,oCAAMA,WAAW,MAAS,CAChD,UAAa,kBADS,gBAG1B,oBAAIA,WAAW,MAAf,oBAAyC,oCAAMA,WAAW,MAAS,CAC/D,UAAa,kBADwB,OAAzC,6DAEiF,oCAAMA,WAAW,MAAS,CACvG,UAAa,kBADgE,UAInF,sCAAmB,oCAAMA,WAAW,KAAQ,CACxC,UAAa,kBADE,gBAAnB,0CAEuE,oCAAMA,WAAW,KAAQ,CAC5F,UAAa,kBADsD,SAFvE,yIAI+J,oCAAMA,WAAW,KAAQ,CACpL,UAAa,kBAD8I,SAJ/J,cAOA,qCAAkB,oCAAMA,WAAW,KAAQ,CACvC,UAAa,kBADC,mBAGlB,wBACE,oBAAIA,WAAW,MAAf,oBAAyC,oCAAMA,WAAW,MAAS,CAC/D,UAAa,kBADwB,gBAAzC,cAE2C,oCAAMA,WAAW,MAAS,CACjE,UAAa,kBAD0B,OAF3C,6BAIiD,iCAAGA,WAAW,MAAS,CACpE,KAAQ,0BADqC,kEAJjD,IAMgF,oCAAMA,WAAW,MAAS,CACtG,UAAa,kBAD+D,+BANhF,kCASA,oBAAIA,WAAW,MAAf,wJAA6K,oCAAMA,WAAW,MAAS,CACnM,UAAa,kBAD4J,aAA7K,QAEkC,oCAAMA,WAAW,MAAS,CACxD,UAAa,kBADiB,oBAFlC,KAKA,oBAAIA,WAAW,MAAf,6MAEF,+CACA,wBACE,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,uBAGpB,oBAAIA,WAAW,MAAK,iCAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,sBAItB,0EACA,0CAAuB,oCAAMA,WAAW,KAAQ,CAC5C,UAAa,kBADM,+BAAvB,8OAGA,6IAA0H,iCAAGA,WAAW,KAAQ,CAC5I,KAAQ,mDAD8G,uBAA1H,gDAEiF,iCAAGA,WAAW,KAAQ,CACnG,KAAQ,yCADqE,SAFjF,KAIwB,iCAAGA,WAAW,KAAQ,CAC1C,KAAQ,0CADY,UAJxB,SAM6B,iCAAGA,WAAW,KAAQ,CAC/C,KAAQ,kHADiB,uCAN7B,KASA,6GAA0F,iCAAGA,WAAW,KAAQ,CAC5G,KAAQ,6CAD8E,cAA1F,QAEgC,iCAAGA,WAAW,KAAQ,CAClD,KAAQ,mCADoB,gBAFhC,KAI+B,wBAAQA,WAAW,KAAnB,sCAJ/B,KAKA,wBACE,oBAAIA,WAAW,MAAf,yCACA,oBAAIA,WAAW,MAAf,8FACA,oBAAIA,WAAW,MAAf,4KAEF,wFACA,0FACA,6DACA,gCACE,mBAAGA,WAAW,cAAa,oCAAMA,WAAW,KAAQ,CAChD,UAAa,kBADU,cAA3B,0BAEqD,oCAAMA,WAAW,KAAQ,CAC1E,UAAa,kBADoC,cAFrD,0EAIqG,oCAAMA,WAAW,KAAQ,CAC1H,UAAa,kBADoF,cAJrG,kFAQF,sDAAmC,oCAAMA,WAAW,KAAQ,CACxD,UAAa,kBADkB,YAAnC,sCAGA,+EAA4D,oCAAMA,WAAW,KAAQ,CACjF,UAAa,kBAD2C,YAA5D,wBAEiD,oCAAMA,WAAW,KAAQ,CACtE,UAAa,kBADgC,YAFjD,KAKA,qCACA,8EAA2D,oCAAMA,WAAW,KAAQ,CAChF,UAAa,kBAD0C,iBAA3D,uNAEqP,iCAAGA,WAAW,KAAQ,CACvQ,KAAQ,yCADyO,UAGrP,uBAAG,iCAAGA,WAAW,KAAQ,CACrB,KAAQ,6CACP,mCAAKA,WAAW,KAAQ,CACvB,IAAO,uEACP,IAAO,UAEb,uBAAG,iCAAGA,WAAW,KAAQ,CACrB,KAAQ,iCADT,cAAH,UAEkC,iCAAGA,WAAW,KAAQ,CACpD,KAAQ,6CADsB,oFAFlC,uCAIqI,iCAAGA,WAAW,KAAQ,CACvJ,KAAQ,sCADyH,yBAJrI,0NAM6P,iCAAGA,WAAW,KAAQ,CAC/Q,KAAQ,oCADiP,aAN7P,MAaJJ,EAAWK,gBAAiB","file":"component---src-pages-posts-4-ways-working-with-react-state-md-a587d494fb8ebd97fba9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"4 подхода для работы с состоянием компонентов в React.\",\n  \"description\": \"Перевод статьи Cory House  Handling State in React: Four Immutable Approaches to Consider.\",\n  \"date\": \"2019-08-24T08:16:49.561Z\",\n  \"categories\": [],\n  \"keywords\": [],\n  \"tags\": [\"react\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`4 подхода для работы с состоянием компонентов в React.`}</h1>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/700/1*xtYEQUYzu5qUKuXg-SGx-g.jpeg\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`Перевод статьи `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/housecor\"\n      }}>{`Cory House`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/\"\n      }}>{`Handling State in React: Four Immutable Approaches to Consider`}</a>{`.`}</p>\n    <p>{`На сегодня, возможно самая сложная тема для понимания в React — это состояние: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{`.`}</p>\n    <p>{`Представим, у вас есть форма для редактирования пользователем. Распространенный подход: создать один обработчик изменений, чтобы работать с изменением любого поля формы.`}</p>\n    <p>{`Выглядит это примерно так:`}</p>\n    <p>{`О четвертой строке кода стоит поволноваться. Четвертая строка действительно меняет состояние `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{`, потому что переменная `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`user`}</code>{` ссылается на `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{`. В `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`react`}</code>{` состояние трактуется как неизменное.`}</p>\n    <p>{`Из `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/react-component.html#state\"\n      }}>{`документации React`}</a>{` :`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Никогда не меняйте `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state`}</code>{` напрямую, так как вызов `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`setState()`}</code>{`, в итоге, может перезаписать те изменения, что вы сделали. `}<br parentName=\"p\"></br>{`\n`}{`Работайте с состоянием `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state`}</code>{`, как будто оно неизменно.`}</p>\n    </blockquote>\n    <p>{`Почему?`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setState`}</code>{` работает под капотом. Это означает, что принудительное изменение состояния `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{` может быть перезаписано, когда выполнится `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setState`}</code>{`.`}<br parentName=\"p\"></br>{`\n`}{`Если вы объявили метод `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`shouldComponentUpdate`}</code>{`, вы не можете использовать проверку на равенство `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`===`}</code>{` внутри, т.к. ссылка на объект не изменится. Так что, вышеупомянутый метод может еще и повлиять на производительность.`}<br parentName=\"p\"></br>{`\n`}{`Вообще, примеры выше часто работают нормально, но, чтобы избежать крайних случаев, работайте с состоянием так, как будто оно неизменно.`}</p>\n    <p>{`Есть четыре способа правильной работы с состоянием `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{`:`}</p>\n    <h4>{`Способ 1: Object.assign`}</h4>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object.assign`}</code>{` создает копию объекта. Первый параметр указывает куда мы будем его копировать, остальные параметры это объекты, которые мы хотим скопировать. Если исправить пример выше, то изменения коснутся строки 3:`}</p>\n    <p>{`В строке 3, я говорю :`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Создай новый пустой объект и добавь туда все свойства из`}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state.user`}</code>{`. В результате получится отдельная копия объекта `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`user,`}</code>{` который хранится в `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`state`}</code>{`.`}<br parentName=\"p\"></br>{`\n`}{`Теперь, я могу спокойно менять объект в строке 4 — это полностью независимый объект от того, что хранится в `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`state`}</code>{`.`}</p>\n    </blockquote>\n    <p>{`Убедитесь, что есть полифилл для метода `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object.assign,`}</code>{` т.к. он не поддерживается в IE и не транспилируется Babel.`}</p>\n    <p>{`4 источника для ознакомления:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/object-assign\"\n        }}>{`object-assign`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\n        }}>{`The MDN docs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://babeljs.io/docs/usage/polyfill/\"\n        }}>{`Babel Polyfill`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://polyfill.io/v2/docs/features/#Object_assign\"\n        }}>{`Polyfill.io`}</a></li>\n    </ul>\n    <h4>{`Способ 2: Object Spread`}</h4>\n    <p>{`Реализация `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object spread`}</code>{` на данный момент находится на стадии 3 и эта возможность языка может быть транспилирована Babel.`}<br parentName=\"p\"></br>{`\n`}{`Этот способ более краткий:`}</p>\n    <p>{`В строке 3, я говорю:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Используй все свойства `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state.user`}</code>{` для создания нового объекта, затем установи для свойства `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`[name]`}</code>{` новое значение из `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`event.target.value`}</code>{`.`}</p>\n    </blockquote>\n    <p>{`Таким образом, этот метод похож на применение `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object.assign`}</code>{`, но он имеет 2 преимущества:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Не требуются полифилы, Babel может транспилировать код`}</li>\n      <li parentName=\"ol\">{`Более краткая форма записи`}</li>\n    </ol>\n    <p>{`Можно даже использовать деструктуризацию и уместить все в одну строку:`}</p>\n    <p>{`Я деструктурировал объект `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`event`}</code>{` для получения ссылки на `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`event.target`}</code>{`. Затем, я объявляю, что состояние `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{` должно быть копией `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`this.state.user`}</code>{` с актуальным значением свойства `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[target.name]`}</code>{`. Получилось лаконичненько, пожалуй это мой любимый способ для обработчиков изменений.`}</p>\n    <p>{`Эти два способа самые распространенные и простые методы поддержки состояния `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{` неизменным. Хотите больше полномочий при работе с состоянием? Тогда посмотрите на следующие два способа.`}</p>\n    <h4>{`Способ 3: Immutability Helper`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper\"\n      }}>{`Immutability-helper`}</a>{` — внешняя библиотека для копирования данных без изменения исходных данных. Эта библиотека представлена в документации `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/update.html\"\n      }}>{`React`}</a>{`.`}</p>\n    <p>{`В строке 5:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Я вызываю `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`merge`}</code>{` — одну из `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/kolodny/immutability-helper#available-commands\"\n        }}>{`команд`}</a>{` `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`immutability-helper`}</code>{`. Как и в случае с `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`Object.assign`}</code>{`, первым параметром я передаю целевой объект, а затем определяю свойство, которое будет добавлено и объединено.`}</p>\n    </blockquote>\n    <p>{`Правда, в случае с `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`immutability-helper`}</code>{` есть больше возможностей. Здесь используется синтаксис, вдохновленный языком запросов `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`MongoDB`}</code>{`, что предоставляет `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper#available-commands\"\n      }}>{`множество мощных способов для работы с неизменяемыми данными`}</a>{`.`}</p>\n    <h4>{`Способ 4: Immutable.js`}</h4>\n    <p>{`Хотите программно применять неизменность? Посмотрите на `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/immutable-js/\"\n      }}>{`immutable.js`}</a>{`. Эта библиотека поддерживает неизменные структуры данных.`}</p>\n    <p>{`Пример с использованием неизменяемой `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{`:`}</p>\n    <p>{`Три шага для использования `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`immutable`}</code>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Импортируем `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`immutable`}</code>{`.`}</li>\n      <li parentName=\"ol\">{`Устанавливаем `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`state`}</code>{` в неизменяемый `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`map`}</code>{` в `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`constructor`}</code></li>\n      <li parentName=\"ol\">{`Используем метод `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`set`}</code>{` в обработчике изменений для создания новой копии объекта `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`user`}</code></li>\n    </ol>\n    <p>{`Вся красота `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`immutable.js`}</code>{` в том, что : если попытаться изменить `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{` напрямую, возникнет ошибка. С предыдущими способами, легко об этом забыть, и React не предупредит вас, когда вы попытаетесь изменить `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`state`}</code>{` напрямую.`}</p>\n    <p>{`Недостатки `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`immutable.js :`}</code></p>\n    <ul>\n      <li parentName=\"ul\">{`Раздуваем бандл. `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`Immutable.js`}</code>{` добавляет `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`57K`}</code>{` в минифицированном виде. `}<a parentName=\"li\" {...{\n          \"href\": \"https://preactjs.com/\"\n        }}>{`Использование библиотек типа Preact могут заменить React всего`}</a>{` `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[3К](https://preactjs.com/)`}</code>{`, что довольно тяжело принять.`}</li>\n      <li parentName=\"ul\">{`Синтаксис. Вам придется ссылаться на свойства объекта через строки и точно также вызывать методы вместо доступа напрямую. Я предпочитаю использовать `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`user.name`}</code>{` чем `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`user.get('name')`}</code>{`.`}</li>\n      <li parentName=\"ul\">{`YATTL (Yet another thing to learn) — Еще одна вещь для изучения — любому, кто присоединится к вашей команде, потребуется изучить еще один API для доступа и записи данных также как и новые типы данных.`}</li>\n    </ul>\n    <p>{`Парочка альтернатив:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rtfeldman/seamless-immutable\"\n        }}>{`seamless-immutable`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aweary/react-copy-write\"\n        }}>{`react-copy-write`}</a></li>\n    </ul>\n    <h4>{`Предупреждение: Берегитесь Вложенных Объектов!`}</h4>\n    <p>{`Варианты 1 и 2 (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object.assign Object spread`}</code>{`) делают только поверхностную копию. Так что, если ваш объект содержит вложенные объекты, они будут скопированы по ссылке, а не по значению. В этом случае если вы измените вложенный объект, вы повлияете и на исходный вложенный объект.`}</p>\n    <p>{`Будьте хирургически аккуратны с тем, что копируете. Не копируйте все подряд. Копируйте объекты,которые изменились. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper\"\n      }}>{`Immutability-helper`}</a>{` легко это делает. Также как и альтернативы: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mweststrate/immer\"\n      }}>{`immer`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/substantial/updeep\"\n      }}>{`updeep`}</a>{`, или `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities\"\n      }}>{`вот длинный список других вариантов`}</a>{`.`}</p>\n    <p>{`Вы можете поддаться искушению использовать инструменты глубокого слияния, например `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/clone-deep\"\n      }}>{`clone-deep`}</a>{` или `}<a parentName=\"p\" {...{\n        \"href\": \"https://lodash.com/docs/#merge\"\n      }}>{`lodash.merge`}</a>{`, `}<strong parentName=\"p\">{`но избегайте глубокого копирования`}</strong>{`.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Глубокое копирование дорого обходится`}</li>\n      <li parentName=\"ol\">{`Глубокое копирование нерационально ( в отличие от копирования только того, что изменилось)`}</li>\n      <li parentName=\"ol\">{`Глубокое копирование провоцирует необязательный рендеринг, т.к. React думает что все изменилось хотя возможно фактически изменился только определенный дочерний объект.`}</li>\n    </ol>\n    <p>{`Спасибо Дэну Абрамову за рекомендации, которые я указал выше.`}</p>\n    <h4>{`Последний совет: Подумайте над использованием функции setState`}</h4>\n    <p>{`Одна загвоздка может вас зацепить:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`setState()`}</code>{` не изменяет состояние `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state`}</code>{` немедленно, но создает ожидание перехода состояния. Попытка доступа к `}<code parentName=\"p\" {...{\n          \"className\": \"language-text\"\n        }}>{`this.state`}</code>{` после вызова этого метода, потенциально может вернуть существующее значение.`}</p>\n    </blockquote>\n    <p>{`Как только запустится вызов `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setState`}</code>{`, код вроде этого приведет к багу:`}</p>\n    <p>{`Если вы хотите запустить код после завершения вызова `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setState`}</code>{`, используйте колбэк `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setState`}</code>{`:`}</p>\n    <h4>{`Мой выбор`}</h4>\n    <p>{`Я предпочитаю простоту и легкость второго варианта: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Object spread`}</code>{`. Он не требует полифиллов или сторонних библиотек, я могу объявлять обработчик изменений в одну строку и могу позаботиться только о том, что изменяется. Что касается работы с вложенными объектами я бы предпочел `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mweststrate/immer\"\n      }}>{`Immer`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://pluralsight.com/author/cory-house\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://cdn-images-1.medium.com/max/800/1*xhJGZsL0sh-k1BpESYirNg.png\",\n          \"alt\": null\n        }}></img></a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/housecor\"\n      }}>{`Cory House`}</a>{` автор `}<a parentName=\"p\" {...{\n        \"href\": \"http://pluralsight.com/author/cory-house\"\n      }}>{`многих курсов JavaScript, React, программированию, .NET, и других на Pluralsight`}</a>{`. Он является главным консультантом `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.reactjsconsulting.com/\"\n      }}>{`reactjsconsulting.com`}</a>{`, архитектором программного обеспечения VinSolutions, a Microsoft MVP, и обучает разработчиков программного обеспечения по всему миру фронтенду и чистому кодингу. Следите за его твитами о фронтенд разработке здесь: `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.twitter.com/housecor\"\n      }}>{`@housecor`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{ueBe:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return s})),t.d(a,"default",(function(){return p}));t("rzGZ"),t("Dq+y"),t("8npG"),t("Ggvi"),t("E5k/"),t("q1tI");var n=t("7ljp");var s={layout:"post",title:"Вы не знаете JS. Типы и грамматика. Глава 2. Типы.",date:"2018-11-30",tags:["js"]},c={_frontmatter:s},m="wrapper";function p(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,["components"]);return Object(n.mdx)(m,Object.assign({},c,t,{components:a,mdxType:"MDXLayout"}),Object(n.mdx)("h1",null,"Вы не знаете JS. Типы данных и грамматика. Значения"),Object(n.mdx)("p",null,"Перевод Главы 2 книги Кайла Симпсона ",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/types-grammar/ch2.md"}),'"Вы не знаете JS. Типы данных и грамматика. Значения"'),".  "),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),", и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," являются основными составными элементами любой программы, но в JavaScript, при работе с этими типами данных, есть несколько особенностей, которые могут смутить или запутать вас."),Object(n.mdx)("p",null,"Давайте посмотрим на несколько встроенных типов JS, и разберемся как мы можем полностью понять и корректно использовать их поведение."),Object(n.mdx)("h2",null,"Массивы"),Object(n.mdx)("p",null,"Если сравнивать с другими строго-типизированными языками, в JavaScript массивы - всего  лишь контейнеры для любых типов значений, начиная от  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," до ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," , ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"object")," и даже других ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," (с помощью которых можно создавать многомерные массивы)."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"2"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true")))),Object(n.mdx)("p",null,"Вам не нужно предварительно устанавливать размер ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),' (подробнее в "Массивы" Глава 3), вы можете просто объявить их и добавлять значения когда вам нужно:'),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 0"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"2"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Предупреждение:")," Используя ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"delete")," для значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," будет удалена ячейка ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," с этим значением, но даже если вы удалите последний элемент таким способом, это ",Object(n.mdx)("strong",{parentName:"p"},"НЕ")," обновит свойство ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"length")," , так что будьте осторожны! Работа оператора ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"delete")," более детально будет рассмотрена в Главе 5."),Object(n.mdx)("p",null,'Будьте осторожны при создании "разрозненных" массивов (оставляя или создавая пустые/пропущенные ячейки):'),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// ячейка `a[1]` отсутствует"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// undefined"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3")))),Object(n.mdx)("p",null,'Такой код может привести к странному поведению "пустых ячеек" оставленных между элементами массива. Пустой слот со значением ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," внутри, ведет себя не так же как явно объявленный эдемент массива (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a[1] = undefined"),'). Подробнее в главе 3 "Массивы".'),Object(n.mdx)("p",null,"Массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),"s проиндексированы числами (как и ожидается), но хитрость в том, что они могут иметь индекс в виде  строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," ключ/свойство могут быть добавлены к массиву (но такие свойства не будут посчитаны в длине массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"length"),"):"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foobar"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 1"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foobar"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"foobar",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2")))),Object(n.mdx)("p",null,"Как бы там ни было, нужно быть осторожнее при использовании индексов массива в виде ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," , т.к. это значение может быть преобразовано в тип ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", потому что использование индекса ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," для массива предпочтительнее чем ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),"!"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"[")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"13"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 14")))),Object(n.mdx)("p",null,"В общем, это не самая лучшая идея использовать пару ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," ключ/свойство как элемент массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),". Используйте ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"object")," для хранения пар ключ/свойство, а массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),"s приберегите для хранения значений в ячейках с числовыми индексами."),Object(n.mdx)("h3",null,"Массивоподобные"),Object(n.mdx)("p",null,"Бывают случаи когда нужно преобразовать  массивоподобное значение (пронумерованную коллекцию значений) в настоящий массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", обычно таким образом вы сможете применить методы массива (такие как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"indexOf(..)"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"concat(..)"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"forEach(..)"),", etc.) к коллекции значений."),Object(n.mdx)("p",null,"Например, различные DOM запросы возвращают список DOM элементов который не является настоящим массивом ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", но, при этом он достаточно похож на массив для преобразования. Другой общеизвестный пример - когда функция предоставляет свои аргументы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"arguments")," в виде массивоподобного объекта (в ES6, считается устаревшим), чтобы получить доступ к списку аргументов."),Object(n.mdx)("p",null,"Один из самых распространенных способов осуществить такое преобразование одолжить метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"slice(..)")," для значения:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," arr ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Array"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"prototype",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"slice"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"call"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," arguments ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tarr",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"bam"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tconsole",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"log"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," arr ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"bar"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"baz"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["bar","baz","bam"]')))),Object(n.mdx)("p",null,"Если ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"slice()")," вызван без каких-либо параметров, как в примере выше, стандартные значения его параметров позволят продублировать массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," (а в нашем случае , массивоподобное значение)."),Object(n.mdx)("p",null,"В ES6, есть встроенный метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Array.from(..)")," который при вызове выполнит то же самое:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"..."),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," arr ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," Array",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"from"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," arguments ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"...")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Примечание:")," ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Array.from(..)")," имеет несколько мощных возможностей, детально о них рассказано в книге ",Object(n.mdx)("em",{parentName:"p"},"ES6 и не только")," данной серии."),Object(n.mdx)("h2",null,"Строки"),Object(n.mdx)("p",null,"Есть общее мнение, что строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," являются всего лишь массивами ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," из символов. Пока мы решаем можно или нельзя использовать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", важно осознавать что JavaScript ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),"на самом деле не то же самое что массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," символов. Это сходство по большей части поверхностное."),Object(n.mdx)("p",null,"Например, давайте сравним два значения:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"f"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"o"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"o"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,"Строки имеют поверхностные сходства по отношению к массивам и массивоподобным, такие как -- например, оба из них имеют свойство ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"length"),",метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"indexOf(..)")," (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," только в ES5), и метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"concat(..)"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"indexOf"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"o"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 1"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"indexOf"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"o"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 1"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"concat"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"bar"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "foobar"'),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," d ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"concat"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"b"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"a"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"r"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["f","o","o","b","a","r"]'),"\n\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," c",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\nb ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," d",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "foo"'),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["f","o","o"]')))),Object(n.mdx)("p",null,'Итак строки по большей части это "массивы символов", верно? ',Object(n.mdx)("strong",{parentName:"p"},"НЕ совсем"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"O"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"O"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "foo"'),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["f","O","o"]')))),Object(n.mdx)("p",null,"В JavaScript строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," неизменяемы, тогда как массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," достаточно изменяемы. Более того форма доступа к символу строки вида ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a[1]"),"  не совсем правильный JavaScript. Старые версии IE не разрешают такой синтаксис (в новых версиях IE это работает). Вместо него нужно использовать ",Object(n.mdx)("em",{parentName:"p"},"корректный")," способ -  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a.charAt(1)"),"."),Object(n.mdx)("p",null,"Еще одним подследствием неизменяемости строк ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," является то что ни один метод строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," меняющий ее содержимое не может делать это по месту, скорее метод создаст и вернет новые строки. И напротив, большинство методов изменяющих содержимое массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," действительно ",Object(n.mdx)("em",{parentName:"p"},"делают")," изменения по месту."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toUpperCase"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," c",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "foo"'),"\nc",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "FOO"'),"\n\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"!"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["f","O","o","!"]')))),Object(n.mdx)("p",null,"Также многие из методов массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", которые могут быть полезны при работе со строками ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),' вообще для них недоступны, но мы можем "одолжить" неизменяющие методы массива ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," для нашей строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"join",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// undefined"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"map",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// undefined"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Array"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"prototype",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"join"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"call"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"-"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," d ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Array"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"prototype",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"map"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"call"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"v"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," v",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toUpperCase"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"."'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"join"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nc",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "f-o-o"'),"\nd",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "F.O.O."')))),Object(n.mdx)("p",null,"Давайте возьмем другой пример: реверсируем строку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," (кстати, это довольно тривиальный общий вопрос на  JavaScript собеседованиях!). У массивов ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),"есть метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reverse()")," осуществляюший изменение по месту, но для строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),"такого метода нет:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"reverse",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// undefined"),"\n\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"reverse"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["!","o","O","f"]'),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// ["!","o","O","f"]')))),Object(n.mdx)("p",null,'К несчастью, это "одалживание" не сработает с методами изменяющими массив ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", потому что строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," неизменяемы и поэтому не могут быть изменены по месту:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Array"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"prototype",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"reverse"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"call"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// все еще возвращаем объект-обертку String (подробнее в Главе 3)"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// для "foo" :(')))),Object(n.mdx)("p",null,"Другое временное решение (хак) отконвертировать строку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," в массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", выполнить желаемое действие, и затем отконвертировать обратно в строку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),"."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// разбиваем `a` на массив символов"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"split"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// реверсируем массив символов"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"reverse"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// объединяем массив символов обратно в строку"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"join"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nc",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "oof"')))),Object(n.mdx)("p",null,"Если кажется, что это выглядит безобразно, так и есть. Тем не менее, ",Object(n.mdx)("em",{parentName:"p"},"это работает")," для простых строк ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),', так что, если вам нужно "склепать" что-нибудь по быстрому, часто такой подход позволит выполнить работу.'),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Предупреждение:")," Будьте осторожны! Этот подход ",Object(n.mdx)("strong",{parentName:"p"},"не работает")," для строк ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," со сложными (unicode) символами в них (astral symbols, multibyte characters, etc.). Вам потребуются более сложные библиотеки которые распознают unicode символы для правильного выполнения подобных операций. Подробнее можно посмотреть в работе Mathias Bynens': ",Object(n.mdx)("em",{parentName:"p"},"Esrever")," (",Object(n.mdx)("a",Object.assign({parentName:"p"},{href:"https://github.com/mathiasbynens/esrever"}),"https://github.com/mathiasbynens/esrever"),")."),Object(n.mdx)("p",null,'Хотя с другой стороны: если вы чаще работаете с вашими "строками",  интерпритируя их как ',Object(n.mdx)("em",{parentName:"p"},"массивы символов"),", возможно лучше просто записывать их в массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),"вместо строк ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),".Возможно вы избавите себя от хлопот при переводе строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," в массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),"каждый раз. Вы всегда можете вызвать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),'join("")')," для массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," ",Object(n.mdx)("em",{parentName:"p"},"символов")," когда вам понадобится представление в ивде строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),"."),Object(n.mdx)("h2",null,"Числа"),Object(n.mdx)("p",null,"В JavaScript есть один числовой тип: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'. Этот тип включает в себя как "целые" ("integer") значения так и десятичные дробные числа. Я заключил "целые" ("integer") в кавычки, потому что в JS это понятие подвергается критике, поскольку здесь нет реально целых значений, как в других языках программирования. Возможно в будущем это изменится, но сейчас, у нас просто есть тип ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),"для всего."),Object(n.mdx)("p",null,'Итак, в JS, "целое" ("integer") это просто числовое значение, которое не имеет десятичной составляющей после запятой . Так нпаример, ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42.0"),' более может считаться "целым"("integer"), чем ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42"),"."),Object(n.mdx)("p",null,"Как и в большинстве современных языков, включая практически все скриптовые языки, реализация чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),' в JavaScript\'основана на стандарте "IEEE 754", котороый часто называют "числа с плавающей точкой" ("floating-point"). JavaScript особенно использует формат "двойной степени точности" (как "64-битные в бинарном формате") этого стандарта.'),Object(n.mdx)("p",null,"В интернете есть множество статей о подробных деталях того, как бинарные числа с плавющей точкой записываются в память, и последствия выбора таких чисел. Т.к. понимание того как работает запись в память не строго необходимо для того чтобы корректно использовать числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," в JS, мы оставим это упражнение для заинтересованного читателя, если вы захотите более детально разобраться со стандартом IEEE 754."),Object(n.mdx)("h3",null,"Числовой синтаксис"),Object(n.mdx)("p",null,"Чичловые литералы в JavaScript в большинстве представлены как литералы десятичных дробей. Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,"Если целая часть дробного числа - ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", можно ее опустить:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),".42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,"Аналогично, если дробная часть после точки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"."),", - ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", можно ее опустить:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Предупреждение:")," ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42.")," выглядит достаточно необычно, и возможно это не лучшая идея если вы хотите избежать недопонимания со стороны других людей при работе с вашим кодом. Но, в любом случае, это корректная запись."),Object(n.mdx)("p",null,"По умолчанию, большинство чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," выводятся как десятичные дроби, с удаленными нулями ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0")," в конце дробной части. Так:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.300"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 42.3"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 42")))),Object(n.mdx)("p",null,"Очень большие или очень маленькие числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," по умолчанию выводятся в экспоненциальной форме, также как и результат метода ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"toExponential()"),", например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5E10"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 50000000000"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toExponential"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "5e+10"'),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2.5e+21"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nc",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2e-11")))),Object(n.mdx)("p",null,"Т.к. числовые значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," могут быть помещены в объект - обертку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," (подробнее Глава 3), числовые значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," могут получать методы встроенные в ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.prototype")," (подробнее Глава 3). Например, метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"toFixed(..)")," позволяет вам определить с точностью до скольки знаков после запятой вывести дробную часть:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.59"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "43"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.6"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.59"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.590"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.5900"')))),Object(n.mdx)("p",null,"Заметьте что результат - строковлое ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," представление числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", и таким образом ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),"- будет добавлено справа если вам понадобится больше знаков после запятой, чем есть сейчас."),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"toPrecision(..)")," похожий метод, но он определяет сколько ",Object(n.mdx)("em",{parentName:"p"},"цифровых знаков")," должно использоваться в выводимом значении:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.59"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "4e+1"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "43"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.6"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.59"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.590"'),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toPrecision"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"6")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.5900"')))),Object(n.mdx)("p",null,"Вам не обязательно использовать переменные для хранения чисел, чтобы применить эти методы; вы можете применять методы прямо к числовым литералам ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),". Но, будьте осторожны с оператором ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"."),". Т.к. ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".")," это еще и числовой оператор, и, если есть такая  возможность, он в первую очередь будет интепритирован как часть числового литерала ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", вместо того чтобы получать доступ к свойству."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// неправильный ситнтакс:"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// SyntaxError"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// это корректное обращение к методам:"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.000"'),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "0.420"'),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.000"')))),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42.toFixed(3)")," неверный синтакс, потому что ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".")," станет частью числового литерала ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42.")," (такая запись корректна -- смотрите выше!), и тогда оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".")," который должен получить доступ к методу ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".toFixed")," отсутствует."),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42..toFixed(3)")," работает т.к. первый оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".")," часть чилового литерала ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," второая ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".")," оператор доступа к свойству. Но, возможно это выглядит странно, и на самом деле очень редко можно увидеть что-то подобное в реальном JavaScript коде. Фактически, это нестандартно -- применять методы прямо к примитивным значениям. Нестандартно не значит ",Object(n.mdx)("em",{parentName:"p"},"плохо")," или ",Object(n.mdx)("em",{parentName:"p"},"неправильно"),"."),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Примечание:")," Есть библиотеки расширяющие встроенные методы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.prototype")," (подробнее Глава 3) для поддержки операций над/с числами ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", и в этих случаях, совершенно правильно использовать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"10..makeItRain()")," чтобы отключить 10-секундную анимацию денежного дождя, или еще что-нибудь такое же глупое."),Object(n.mdx)("p",null,"Также технически корректной будет такая запись (заметьте пробел):"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toFixed"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "42.000"')))),Object(n.mdx)("p",null,"Тем не менее, с числовыми литералами ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," особенно, ",Object(n.mdx)("strong",{parentName:"p"},"это черезвычайно запутанный стиль кода")," и он не преследует иных цедей кроме как запутать разработчиков при работе с кодом (в том числе и вас в будущем). Избегайте этого."),Object(n.mdx)("p",null,"Числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," также могут быть представлены в экспоненциальной форме, которую обычно используют для представления больших чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," таких как:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," onethousand ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1E3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// means 1 * 10^3"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," onemilliononehundredthousand ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1.1E6"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// means 1.1 * 10^6")))),Object(n.mdx)("p",null,"Числовые литералы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," могут быть также выражены в других формах, таких как, двоичная, восьмеричная, и шестнадцатиричная."),Object(n.mdx)("p",null,"Эти форматы работают в текущей версии JavaScript:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0xf3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// шестнадцатиричная для: 243"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0Xf3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// то же самое"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0363"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// восьмеричная для: 243")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Примечание:")," Начиная с ES6 с включенным ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"strict")," режимом, восьмеричная форма ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0363")," больше не разрешена (смотрите ниже новую форму). Форма ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0363")," все еще разрешена в ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"non-strict")," режиме, но в любом случае нужно прекратить ее использовать, чтобы использовать современный подход (и потому что пора бы использовать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"strict")," режим уже сейчас!)."),Object(n.mdx)("p",null,"Для ES6, доступны новые формы записи:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0o363"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// восьмеричная для: 243"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0O363"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// то же самое"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0b11110011"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// двоичная для: 243"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0B11110011"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// то же самое")))),Object(n.mdx)("p",null,"И пожалуйста окажите вашим коллегам - разработчикам услугу: никогда не используйте форму вида ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0O363"),". ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0")," перед заглавной ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"O")," может лишь вызвать затруднение при чтении кода. Всегда используйте нижний регистр в подобных формах: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0x"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0b"),", и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0o"),"."),Object(n.mdx)("h3",null,"Маленькие дробные числа"),Object(n.mdx)("p",null,"Самый известный побочный эффект от использования бинарной формы чисел с плавающей точкой (которая, как мы помним, справедлива для ",Object(n.mdx)("strong",{parentName:"p"},"всех")," языков использующих стандарт IEEE 754 -- не ",Object(n.mdx)("em",{parentName:"p"},"только")," JavaScript как многие привыкли предполагать) это:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Математически, что результатом выражения должно быть ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true"),". Почему же в результате получается ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"false"),"?"),Object(n.mdx)("p",null,"Если по простому, представления чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.1")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.2")," в бинарном виде с плавающей точкой не совсем точные, поэтому когда мы их складываем, результат не совсем ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.3"),". Это ",Object(n.mdx)("strong",{parentName:"p"},"действительно")," близко: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.30000000000000004"),', но если сравнение не прошло, "близко" уже не имеет значения.'),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Примечание:")," Должен ли JavaScript перейти на другую реализацию числового типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),' которая имеет точные представления для всех значений? Некоторые так думают. За все годы появлялось много альтернатив. Никакие из них до сих пор не были утверждены, и возможно никогда не будут. Кажется что это также легко, как просто поднять руку и сказать "Да исправьте вы уже этот баг!", но это вовсе не так. Если бы это было легко, это определенно было бы имправлено намного раньше.'),Object(n.mdx)("p",null,"Сейчас, вопрос в том, что если есть числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," для которых нельзя быть ",Object(n.mdx)("em",{parentName:"p"},"уверенным")," в их точности, может нам совсем не стоит испльзовать числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),"? ",Object(n.mdx)("strong",{parentName:"p"},"Конечно нет.")),Object(n.mdx)("p",null,'Есть несколько случаев применения чисел, где нужно быть осторожными, особенно имея дело с дробными числами. Также есть достаточно (возможно большинство?) случаев когда мы имеем дело только с целыми числами ("integers"), и более того, работаем только с числами максимум до миллиона или триллиона. Такие случаи применения чисел всегда были, и будут, ',Object(n.mdx)("strong",{parentName:"p"},"превосходно безопасными")," для проведения числовых операций в JS."),Object(n.mdx)("p",null,"Ео что если нам ",Object(n.mdx)("em",{parentName:"p"},"было")," нужно сравнить два числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," таких как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.1 + 0.2")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0.3"),", зная что обычный тест на равенство не сработает?"),Object(n.mdx)("p",null,'Самая общепринятая практикаиспользование миниатюрной "ошибки округления" как ',Object(n.mdx)("em",{parentName:"p"},"допуска"),' для сравнения. Это малюсенькое значение часто называют "машинной эпсилон," которое составляет ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2^-52")," (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2.220446049250313e-16"),") для числового типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," в JavaScript."),Object(n.mdx)("p",null,"В ES6, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.EPSILON")," определено заранее этим пороговым значением, так что если вы хотите его использовать, нужно применить полифилл для определения порогового значения для стандартов до-ES6:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"EPSILON"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"EPSILON")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"pow"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"52"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,"Мы можем использовать это значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.EPSILON")," для проверки двух чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'на "равенство" (с учетом допуска ошибки округления):'),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"numbersCloseEnoughToEqual"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"n1",Object(n.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),","),"n2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"abs"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," n1 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-")," n2 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<")," Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"EPSILON"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"numbersCloseEnoughToEqual"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"numbersCloseEnoughToEqual"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.0000001"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0.0000002")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Максимальное значение числа с плавающей точкой приблизительно ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"1.798e+308")," (реально огромное число!), определено как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_VALUE"),". Минимальное значение, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MIN_VALUE")," приблизительно ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"5e-324"),", оно положительное, но очень близко к нулю!"),Object(n.mdx)("h3",null,"Безопасные диапазоны целых чисел"),Object(n.mdx)("p",null,"Из-за представления чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'в JS, существует диапазон "безопасных" значений для всех чисел ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),' "integers", и он существенно меньше значения ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_VALUE"),"."),Object(n.mdx)("p",null,'Максимальное целое число, которое может быть "безопасно" представлено (это означает гарантию того, что запрашиваемое значение будет представлено совершенно определенно) это ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2^53 - 1"),", что составляет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"9007199254740991"),". Если вы добавите запятые, то увидите что это немного больше 9 квадридллионов. Так что это чертовски много для верхнего диапазона чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),"."),Object(n.mdx)("p",null,"Это значение автоматически предопределенно в ES6, как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_SAFE_INTEGER"),". Ожидаемо, минимальное значение, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-9007199254740991"),", соответственно предопрелено в ES6 как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MIN_SAFE_INTEGER"),"."),Object(n.mdx)("p",null,"Чаще всего JS программы могут столкнуться с такими большими чилами, когда имеют дело с 64-битными ID баз данных, и т.п.. 64-битные не могут быть точно представлены типом ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", так что они должны быть записаны (и переданы в/из) JavaScript с помощью строкового ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," представления."),Object(n.mdx)("p",null,"Математические операции с ID ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," значениями (кроме сравнения, которое отлично пройдет со строками ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),") обычно не выполняются, к счастью. Но если вам ",Object(n.mdx)("em",{parentName:"p"},"необходимо")," выполнить математическую операцию с очень большими числами, сейчас вы можете использовать утилиту ",Object(n.mdx)("em",{parentName:"p"},"big number"),". Поддержка больших чисел может быть реализована в будущих стандартах JavaScript."),Object(n.mdx)("h3",null,"Проверяем является ли число целым"),Object(n.mdx)("p",null,"Чтобы проверить,является ли число целым, вы можете использовать специальный ES6-метод ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isInteger(..)"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.000")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42.3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Полифилл для ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isInteger(..)")," для стандартов до-ES6:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"isInteger",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function-variable function"}),"isInteger")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"num"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typeof")," num ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"number"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&")," num ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"%")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,"Для проверки на нахождение числа в безопасном диапазоне ",Object(n.mdx)("em",{parentName:"p"},"safe integer"),", используется ES6-метод  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isSafeInteger(..)"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isSafeInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"MAX_SAFE_INTEGER")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isSafeInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"pow"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"53")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isSafeInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"pow"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"53")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true")))),Object(n.mdx)("p",null,"Полифилл для ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isSafeInteger(..)")," для стандартов до-ES6:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"isSafeInteger",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function-variable function"}),"isSafeInteger")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"num"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isInteger"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," num ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&"),"\n\t\t\tMath",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"abs"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," num ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"<=")," Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"MAX_SAFE_INTEGER"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("h3",null,"32-битные целые числа (со знаком)"),Object(n.mdx)("p",null,"Пока целые числа могут быть приблизительно до 9 квадриллионов (53 бита), есть несколько числовых операторов (например побитовые операторы), которые определены для 32-битных чисел ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),', так "безопасный диапазон" для чисел ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," используемый в таких случаях намного меньше."),Object(n.mdx)("p",null,"Диапазоном является от ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Math.pow(-2,31)")," (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-2147483648"),", около -2.1 милллиардов) до ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Math.pow(2,31)-1")," (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2147483647"),", около +2.1 миллиардов)."),Object(n.mdx)("p",null,"Чтобы записать число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," из переменной ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," в 32-битное целое число, используем ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a | 0"),". Это сработает т.к.  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"|"),' побитовый оператор и работает только с 32-битными целыми числами (это означает что он будет работать только с 32 битами, а остальные биты будут утеряны). Ну, а "ИЛИ" с нулем побитовый оператор, который не проводит операций с битами.'),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Примечание:")," Определенные специальные значения (о которых будет расказано далее) такие как ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," и  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity"),' не являются "32-битными безопасными значениями" и в случае передачи этих значений побитовому оператору, будет применен абстрактный оператор  ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"ToInt32")," (смотрите главу 4) результатом которого будет значение",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"+0")," для последующего применения побитового оператора."),Object(n.mdx)("h2",null,"Специальные значения"),Object(n.mdx)("p",null,"Есть несколько специальных значений, которые распространяются на все типы, и с которыми ",Object(n.mdx)("em",{parentName:"p"},"внимательный")," JS разработчик должен быть осторожен, и использовать их по назначению."),Object(n.mdx)("h3",null,"Отстуствие значения"),Object(n.mdx)("p",null,"Для типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),", есть только одно значение: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),". Для типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null"),", есть только одно значение: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null"),". Итак для них обоих, есть свой тип и свое значение."),Object(n.mdx)("p",null,"И ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null"),' часто считаются взаимозаменяемыми, как либо "пустое" значение, либо его "отсутствие". Другие разработчики различают их в соответствиис их особенностями. Например:'),Object(n.mdx)("ul",null,Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"null")," пустое значение"),Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"undefined")," остуствующее значение")),Object(n.mdx)("p",null,"Или:"),Object(n.mdx)("ul",null,Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"undefined")," значение пока не присвоено"),Object(n.mdx)("li",{parentName:"ul"},Object(n.mdx)("code",Object.assign({parentName:"li"},{className:"language-text"}),"null")," значение есть и там ничего не содержится")),Object(n.mdx)("p",null,'Независимо от того, как вы "определяете" и используете эти два значения, ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null")," это специальное ключевое слово, не является идентификатором, и таким образом нельзя его использовать для назначения переменной (зачем вообще это делать!?). Как бы там ни было, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," ",Object(n.mdx)("em",{parentName:"p"},"является")," (к несчастью) идентификатором. Увы и ах."),Object(n.mdx)("h3",null,"Undefined"),Object(n.mdx)("p",null,"В нестрогом режиме non-",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"strict"),", действительно есть возможность (хоть это и срезвчайно плохая идея!) присваивать значение глобальному идентификатору ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," :"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"undefined")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// очень плохая идея!"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"use strict"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"undefined")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// TypeError!"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,"Как в нестрогом non-",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"strict")," так и в строгом ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"strict")," режимах, тем не менее, вы можете создать локальную переменную ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),". Но, еше раз, это ужасная идея!"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"use strict"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"undefined")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tconsole",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"log"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"undefined")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Настоящие друзья никогда не позволят друзьям переназначить ",Object(n.mdx)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"undefined"),".")," Никогда."),Object(n.mdx)("h4",null,"Оператор ",Object(n.mdx)("code",Object.assign({parentName:"h4"},{className:"language-text"}),"void")),Object(n.mdx)("p",null,"Пока ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," является встроенным идентификатором который содержит (если только кто-нибудь это не изменил -- см. выше!) встроенное значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),", другой способ получить это значение - оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void"),"."),Object(n.mdx)("p",null,"Выражение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void ___"),' "аннулирует" любое значение, так что результатом выражения всегда будет являться значение ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),". Это выражение не изменяет действующее значение; оно просто дает нам уверенность в том, что мы не получим назад другого значения после применения оператора."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nconsole",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"log"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// undefined 42")))),Object(n.mdx)("p",null,"По соглашению (большей частью из C-языка прогаммирования), для получения только самого значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," вместо использования ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void"),", вы можете использовать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void 0")," (хотя и понятно что даже ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void true")," или любое другое ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void")," выражение выполнит то же самое). На практике нет никакой разницы между ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void 0"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void 1"),", и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),"."),Object(n.mdx)("p",null,"Но, оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void")," может быть полезен в некоторых других обстоятельствах, например, если нужно быть уверенным, что выражение не вернет никакого результата (даже если оно имеет побочный эффект)."),Object(n.mdx)("p",null,"Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"doSomething"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// примечание: `APP.ready` поддерживается нашим приложением"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"APP"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"ready",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// попробуйте еще раз позже"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"void")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"setTimeout"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," doSomething",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"100")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," result",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// делаем что - нибудь другое"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," result",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// есть возможность выполнить задачу прямо сейчас?"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"doSomething"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// выполняем следующие задания немедленно right away"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,"Здесь, функция ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"setTimeout(..)")," возвращает числовое значение (уникальный идентификатор интервала таймера, если вы захотите его отменить), но нам нужно применить оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void")," чтобы значение, которое вернет функция не было  ложно-положительным  с инструкцией ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"if"),"."),Object(n.mdx)("p",null,"Многие разработчики  предпочитают выполнять действия по отдельности, что в результате работает так же, но не требует применения оператора ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"APP"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"ready",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// попробуйте еще раз позже"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"setTimeout"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," doSomething",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"100")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,"Итак, если есть место где существует значение (как результат выражения) , и вы находите полезным получить вместо него ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),", используйте оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void"),". Возможно это не должно часто встречаться в ваших программах, но в редких случах, когда это понадобится, это может быть довольно полезным."),Object(n.mdx)("h3",null,"Специальные числа"),Object(n.mdx)("p",null,"Тип ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," включает в себя несколько специальных значений. Рассмотрим каждое более подробно."),Object(n.mdx)("h4",null,"НЕ Число, Число"),Object(n.mdx)("p",null,"Любая математическая операция которую выполняют с операндами не являющимися числами ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," (или значениями которые могут быть интерпритированы как числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),"в десятчиной или шестнадцатиричной форме) приведет к ошибке при попытке получить значение чилового типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", в этом случае вы получите значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),"."),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),' буквально означает "not a ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),' ("НЕ число"), хотя это название/описание довольно скудное и обманчивое, как мы скоро увидим. Было бы правильнее думать о  ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),' как о "неправильном числе," "ошибочном числе," или даже "плохом числе," чем думать о нем как о  "НЕ числе."'),Object(n.mdx)("p",null,"Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// NaN"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typeof")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"number"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true")))),Object(n.mdx)("p",null,"Другими словами: \"Типом НЕ-числа явдяется число 'number'!\" Ура запутывающим именам и семантике."),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),' навроде "сторожевого значения" (другими словами нормальное значение, которое несет специальный смысл) которое определяет сбой при проведении операции назначения числа ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'. Эта ошибка, по сути означает следующее: "Я попробовал выполнить математическую операция и произошла ошибка, поэтому, вместо результата, здесь ошибочное число ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'."'),Object(n.mdx)("p",null,"Итак, если у вас есть значение в какой-нибудь переменной, и вы хотите проверить, не является ли оно ошибочным числом ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),", вы должно быть думаете что можно просто его сравнить пямо с ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),", как с любым другим значением, например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null")," или ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),". Неа."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"NaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"NaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," очень особенное значение и оно никогда не будет равно другому значению ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," (т.е., оно не равно самому себе). Фактически, это всего лишь значение, которое не рефлексивно (без возможности идентификации ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x === x"),"). Итак, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN !== NaN"),". Немного странно, да?"),Object(n.mdx)("p",null,"Так как мы ",Object(n.mdx)("em",{parentName:"p"},"можем")," его проверить, если нельзя сравнить с ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," (т.к. сравнение не сработает)?"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true")))),Object(n.mdx)("p",null,"Достаточно просто, верно? мы использовали встроенную глобальную функцию, которая называется ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"isNaN(..)")," и она сообщила нам является значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," или нет. Проблема решена!"),Object(n.mdx)("p",null,"Не так быстро."),Object(n.mdx)("p",null,"У функции ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"isNaN(..)")," есть большой недостаток. Он появляется при попытках воспринимать значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),' ("НЕ-Число") слишком буквально -- вот, вкратце, как это работает: "проверяем то, что нам передали -- либо это не является числом ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", либо -- это число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),'." Но это не совсем правильно.'),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// NaN"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "foo"'),"\n\nwindow",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nwindow",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true -- упс!")))),Object(n.mdx)("p",null,"Понятно, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),'"foo"')," буквально ",Object(n.mdx)("em",{parentName:"p"},"НЕ-Число"),", но и определенно не яляется значением ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),"! Этот баг был в JS с самого начала (более 19 лет ",Object(n.mdx)("em",{parentName:"p"},"упс"),")."),Object(n.mdx)("p",null,"В ES6, наконец была представлена функция: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isNaN(..)"),". Простым полифиллом, чтобы вы могли проверить на значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," ",Object(n.mdx)("em",{parentName:"p"},"прямо сейчас"),", даже в браузерах не поддерживающих-ES6, будет:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"isNaN",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function-variable function"}),"isNaN")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"n"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"\n\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"typeof")," n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"number"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&"),"\n\t\t\twindow",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNaN"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false -- фуух!")))),Object(n.mdx)("p",null,"Вообще,  мы можем реализовать полифилл ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isNaN(..)")," даже проще, если воспользоваться специфической особенностью ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),", которое не равно самому себе. ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," ",Object(n.mdx)("em",{parentName:"p"},"единственное")," для котрого это справедливо; любое другое значение всегда ",Object(n.mdx)("strong",{parentName:"p"},"равно самому себе"),"."),Object(n.mdx)("p",null,"Итак:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"isNaN",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tNumber",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function-variable function"}),"isNaN")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"n"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!==")," n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,"Странно, правда? Но это работает!"),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),"могут появляться во многих действующих JS программах, намеренно или случайно. Это действительно хорошая идея проводить надежную проверку, например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isNaN(..)")," если это поддерживается (или полифилл), чтобы распознать их должным образом."),Object(n.mdx)("p",null,"Если вы все еще используете ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"isNaN(..)")," в своей программе, плохая новость: в вашей программе ",Object(n.mdx)("em",{parentName:"p"},"есть баг"),", даже если вы с ним еще не столкнулись!"),Object(n.mdx)("h4",null,"Бесконечности"),Object(n.mdx)("p",null,'Разработчик пришедшие из традиционных компилируемых языков вроде C, возможно, привыкли видеть ошибку компилирования ли выполнения, например "деление на ноль," для подобных операций:'),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,"Как бы там ни было, в JS, эта операция четко определена, и ее результатом будет являться -- бесконечность ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity")," (ну или ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.POSITIVE_INFINITY"),"). Как и ожидается:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Infinity"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -Infinity")))),Object(n.mdx)("p",null,"Как вы видите, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-Infinity")," (или ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.NEGATIVE_INFINITY"),") получается при делении-на-ноль где один из операторов (но не оба!) является отрицательным."),Object(n.mdx)("p",null,"JS использует вещественное представление чисел (IEEE 754 числа с плавающей точкой, о котором было рассказано ранее), вразрез с чистой математикой, похоже что ",Object(n.mdx)("em",{parentName:"p"},"есть")," возможность переполнения при выполнении таких операций как сложение или вычитание, и в этом случае результатом будет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity")," или ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-Infinity"),"."),Object(n.mdx)("p",null,"Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," Number",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"MAX_VALUE"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 1.7976931348623157e+308"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Infinity"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"pow"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"970")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// Infinity"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," Math",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"pow"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"969")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 1.7976931348623157e+308")))),Object(n.mdx)("p",null,'Согласно спецификации, если, в результате операции вроде сложения, получается число, превышающее максимальное число, которое может быть представлено, функция IEEE 754 "округления-до-ближайшего" определит, каким должен быть результат. Итак, если проще, ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_VALUE + Math.pow( 2, 969 )")," ближе к ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_VALUE")," чем к бесконечности ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity"),', так что его "округляем вниз," тогда как ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.MAX_VALUE + Math.pow( 2, 970 )")," ближе к бесконечности ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity"),', поэтому его "округляем вверх".'),Object(n.mdx)("p",null,"Если слишком много об этом думать, то у вас так скоро голова заболит. Не нужно. Серьезно, перестаньте!"),Object(n.mdx)("p",null,"Если однажды вы перешагнете одну из ",Object(n.mdx)("em",{parentName:"p"},"бесконечностей"),", в любом случае, назад пути уже не будет. Другими словами, в почти литературной форме, вы можете прийти из действительности в бесконечность, но не из бесконечности в действительность."),Object(n.mdx)("p",null,'Это фактически философский вопрос: "Что если бесконечность разделить на бесконечность". Наш наивный мозг скажет что-нибудь вроде "1", или, может, "бесконечность." Но ни то, ни другое, не будет верным. И в математике, и в JavaScript, операция ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity / Infinity")," не определена. В JS, результатом будет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),"."),Object(n.mdx)("p",null,"Но, что если любое вещественное положительное число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", разделить на бесконечность ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity"),"? Это легко! ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),". А что если вещественное отрицательное число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", разделить на бесконечность ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Infinity"),"? Об этом в следующей серии, продолжайте читать!"),Object(n.mdx)("h4",null,"Нули"),Object(n.mdx)("p",null,"Это может смутить математически-думающего читателя, но в JavaScript есть два значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0")," нормальный ноль (также известных как положительный ноль ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"+0"),") ",Object(n.mdx)("em",{parentName:"p"},"и")," отрицательный ноль ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0"),". Прежде чем объяснять почему существует ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," , мы должны посмотреть как это работает в JS, потому что это может сбить с толку."),Object(n.mdx)("p",null,"Кроме того что значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," может быть буквально присвоено, отрицательный ноль может быть результатом математических операций. Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0")))),Object(n.mdx)("p",null,"Отрицательный ноль не может быть получен в результате сложения или вычитания."),Object(n.mdx)("p",null,"Отрицательный ноль при выводе в консоль разработчика обычно покажет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0"),", хотя до недавнего времени это не было общепринятым, вы можете узнать что некоторые старые браузеры до сих пор выводят ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),"."),Object(n.mdx)("p",null,"Как бы там ни было, при попытке преобразования отрицательного нуля в строку, всегда будет выведено ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),'"0"'),", согласно спецификации."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// (некоторые браузеры) выводят в консоль правильное значение"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// но спецификация лжет вам на каждом шагу!"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"toString"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "0"'),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'""'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "0"'),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"String"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "0"'),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// странно, даже JSON введен в заблуждение"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"JSON"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"stringify"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),'// "0"')))),Object(n.mdx)("p",null,"Интересно,что обратная операция (преобразование из строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string")," в число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),") не врет:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"-0"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"Number"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"-0"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token constant"}),"JSON"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"parse"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"-0"')," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// -0")))),Object(n.mdx)("p",null,Object(n.mdx)("strong",{parentName:"p"},"Предупреждение:")," Поведение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"JSON.stringify( -0 )")," по отношению к ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),'"0"')," странное лишь частично, если вы заметите то обратная операция: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),'JSON.parse( "-0" )')," выведет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," как вы и ожидаете."),Object(n.mdx)("p",null,"В дополнение к тому что преобразование в строку скрывает реальное значение отрицательного нуля, операторы сравнения также (намеренно) настроены ",Object(n.mdx)("em",{parentName:"p"},"лгать"),"."),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"==")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false"),"\na ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),">")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Очевидно, если вы хотите различать ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," от ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0")," в вашем коде, вы не можете просто полагаться на то,что выведет консоль разработчика, так что придется поступить немного хитрее:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNegZero"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"n"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tn ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"Number"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," n ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"Infinity"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNegZero"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNegZero"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"isNegZero"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Итак, зачем нам нужен отрицательный ноль, вместо обычного значения?"),Object(n.mdx)("p",null,"Есть определенные случаи где разработчики используют величину значения для определения одних данных (например скорость перемещения анимации в кадре) а знак этого числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," для представления других данных (например направление перемещения)."),Object(n.mdx)("p",null,"В этих случаях, как в примере выше, если переменная достигнет нуля и потеряет знак, тогда, вы потеряете информацию о том, откуда она пришла, до того как достигла нулевого значения. Сохранение знака нуля предупреждает потерю этой информации."),Object(n.mdx)("h3",null,"Специальное равенство"),Object(n.mdx)("p",null,"Как мы увидели выше, значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," ведут себя по--особенному при попытке проверки на равенство. ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," никогда не равно самому себе, так что вы должны использовать метод ES6 ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number.isNaN(..)")," (или полифилл). Аналогично, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0")," обманывает и притворяется (даже при использовании ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"===")," строгого равенства -- подробнее в Главе 4) обычным положительным ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", так что приходится использовать что-то вроде хаков типа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"isNegZero(..)")," как предлогалось выше."),Object(n.mdx)("p",null,"Для ES6, есть новый метод для проверки двух значений на абсолютное равенство, без всех этих исключений. Он называется ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Object.is(..)"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token string"}),'"foo"'),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"*")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nObject",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"is"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"NaN")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\nObject",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"is"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"-"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// true"),"\n\nObject",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"is"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// false")))),Object(n.mdx)("p",null,"Есть достаточно простой полифилл для ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Object.is(..)")," если ES6 не поддерживается:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!"),"Object",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"is",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tObject",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function-variable function"}),"is")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"v1",Object(n.mdx)("span",Object.assign({parentName:"span"},{className:"token punctuation"}),",")," v2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// проверка на `-0`"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v1 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"&&")," v2 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," v1 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"/")," v2",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// проверка на `NaN`"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"if")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),"v1 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!==")," v1",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," v2 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"!==")," v2",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// любые другие значения"),"\n\t\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"return")," v1 ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"===")," v2",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}")))),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Object.is(..)"),", возможно, не должен быть использован в случаях, когда известно что ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"==")," или ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"===")," являются ",Object(n.mdx)("em",{parentName:"p"},"безопасными"),' (подробнее в Главе 4 "Преобразование"), как операторы, они, вероятно, более эффективны и просты в применении. ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Object.is(..)")," по большей части применяется в специальных случаях проверки на равенство."),Object(n.mdx)("h2",null,"Значение против Ссылки"),Object(n.mdx)("p",null,"Какт во многих других языках, значения могут быть присвоены/переданы либо с помощью копирования-по-значению,либо с помощью копирования-по-ссылке oв зависимости от синтаксиса, который вы используете."),Object(n.mdx)("p",null,"Например, в C++ если вы хотите передать число ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," переменной в функции и иметь обновленное значение переменной, вы можете объявить параметр функции например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"int& myNum"),", и когда вы передадите ему переменную например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"myNum")," будет ",Object(n.mdx)("strong",{parentName:"p"},"ссылаться на ",Object(n.mdx)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"x")),"; ссылки -- это как особые формы указателей, когда вы получаете указатель на другую переменную (как ",Object(n.mdx)("em",{parentName:"p"},"алиас (псевдоним)"),"). Если вы не объявляете ссылочный параметр, переданное значение  ",Object(n.mdx)("em",{parentName:"p"},"всегда")," будет скопировано, Даэе если это сложный объект."),Object(n.mdx)("p",null,"В JavaScript, нет указателей, и ссылки работают немного по-другому. вы не можете получить ссылку от одной JS переменной на другую. Это просто невозможно."),Object(n.mdx)("p",null,"ССылки в JS указывают на (общее) ",Object(n.mdx)("strong",{parentName:"p"},"значение"),", так если у вас есть 10 разных ссылок, они всегда будут разными ссылками на одно общее значение; ",Object(n.mdx)("strong",{parentName:"p"},"ни одна из этих ссылок/указателей tне будет указывать друг на друга.")),Object(n.mdx)("p",null,"Более того, в JavaScript, нет никахих синтаксических подсказок которые контролируют как будет происходить присовение/передача по значению или по ссылке. Вместо этого, ",Object(n.mdx)("em",{parentName:"p"},"тип")," значения ",Object(n.mdx)("em",{parentName:"p"},"полностью")," контролирует будет ли это значение присвоено с помощью копирования-по-значению,либо с помощью копирования-по-ссылке."),Object(n.mdx)("p",null,"Давайте продемонстрируем:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// `b` всегда копирует значение из `a`"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"++"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," c ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," d ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," c",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// `d` это ссылка на общее значение `[1,2,3]`"),"\nd",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nc",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3,4]"),"\nd",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3,4]")))),Object(n.mdx)("p",null,"Простые значения (примитивы) ",Object(n.mdx)("em",{parentName:"p"},"всегда")," назаначаются/передаются копированием-по-значению: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"boolean"),",и ES6 ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"symbol"),"."),Object(n.mdx)("p",null,"Сложные значения -- объекты ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"object")," (включая массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", и все объекты-обертки -- подробнее в Главе 3) и функции ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"function")," -- ",Object(n.mdx)("em",{parentName:"p"},"всегда")," всегда делают копию по ссылке при назначении или передаче."),Object(n.mdx)("p",null,"В примере выше, т.к. ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2")," это примитив, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," содержит начальную копию этого значения, а переменной ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"b")," присвоена другая ",Object(n.mdx)("em",{parentName:"p"},"копия")," значения. При изменении ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"b"),", вы никоим образом не меняете значение в переменной ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a"),"."),Object(n.mdx)("p",null,"Но ",Object(n.mdx)("strong",{parentName:"p"},"оба",Object(n.mdx)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"c")," и ",Object(n.mdx)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"d"))," отдельные ссылки на одно общее значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3]"),", которое является сложным значением. Важно понимать что никто из переменных: ни ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"c")," ни  ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"d"),' не "обладает" значением ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3]")," в большей степени -- они оба всего лишь равноправные ссылки на значение. Таким образом, когда мы используем любую ссылку для изменения (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),".push(4)"),") актуального общего значения ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," самого по себе, это влияет только на это общее значение, и обе ссылки будут указываьб на новое измененное значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3,4]"),"."),Object(n.mdx)("p",null,"Раз уж ссылки указывают на сами значения, а не на переменные, вы не можете использовать одну ссылку, чтобы изменить место, куда будет указывать другая ссылка:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3]"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3]"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// позже"),"\nb ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"6"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3]"),"\nb",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [4,5,6]")))),Object(n.mdx)("p",null,"Когда мы делаем присвоение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"b = [4,5,6]"),", мы не делаем абсолютно ничего,что могло бы повлиять на то, ",Object(n.mdx)("em",{parentName:"p"},"куда")," ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," все еще ссылается (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3]"),"). Чтобы это выполнить, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"b"),"  должно указывать на ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," вместо того,чтобы ссылаться на массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," -- но такой возможности в JS нет!"),Object(n.mdx)("p",null,"Самым распространненым случаем при котором может возникнуть путаница, является использование параметров функции:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"x"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3,4]"),"\n\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// позже"),"\n\tx ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"6"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"7")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [4,5,6,7]"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3,4]  а не  [4,5,6,7]")))),Object(n.mdx)("p",null,"Когда мы передаем в аргументе переменную ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a"),", функция принимает копию ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," по ссылке для ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x"),". ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," разные ссылки на одно общее значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3]"),". Теперь, внутри функции, мы можем использовать ссылку для изменения самого значения (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"push(4)"),"). Но, когда мы делаем присвоение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x = [4,5,6]"),", мы никак не влияем на то значение, на которое изначально указывала переменная ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," -- значит, она все еще указывает на (теперь измененное) значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[1,2,3,4]"),"."),Object(n.mdx)("p",null,"Нельзя с помощью ссылки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x")," изменить место, куда ссылается ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a"),". Мы можем лишь изменить содержимое общего значения, на которое указывют ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x"),"."),Object(n.mdx)("p",null,"Чтобы добиться изменения содержимого переменной ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," на значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[4,5,6,7]"),", вы не можете создать и назначить новый массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," -- вы должны изменить существующее значение массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),":"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"x"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [1,2,3,4]"),"\n\n\t",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// позже"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"length ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"0"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// обнуляем массив по месту"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"push"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"4"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"5"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"6"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),",")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"7")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [4,5,6,7]"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"["),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),","),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"3"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"]"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\na",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// [4,5,6,7]  а не  [1,2,3,4]")))),Object(n.mdx)("p",null,"Как вы можете видеть, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x.length = 0")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x.push(4,5,6,7)")," не создавали но массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", а изменяли существующий общий массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),". Таким образом, конечно, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a")," ссылается на новое значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[4,5,6,7]"),"."),Object(n.mdx)("p",null,"Помните: вы не можете напрямую управлять/переопределять тип копирования: по-значению или по-ссылке -- эти правила полностью контролируются типом основного значения."),Object(n.mdx)("p",null,"Чтобы эффективно передать сложное значение (например массив",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),") с помощью копирования по-значению, вам понадобится вручную создать его копию, так чтобы переданная ссылка больше не указывала на оригинал. Например:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"slice"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")))),Object(n.mdx)("p",null,Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"slice(..)")," без параметров по умолчанию делает полностью новую (поверхностую) копию массива ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),". Таким образом, мы передаем ссылку только на скопированный массив ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", а значит ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"foo(..)")," не может повлиять на содержимое ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a"),"."),Object(n.mdx)("p",null,"Чтобы выполнить обратное действие -- передать примитивное значение таким способом, что его изменения будут, навроде как ссылка -- вам понадобится обернуть значение в другое сложное значение (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"object"),", ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),", и т.п.), которое ",Object(n.mdx)("em",{parentName:"p"},"может")," быть передано копированием по-ссылке:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"wrapper"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\twrapper",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"42"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," obj ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\ta",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),":")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," obj ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\nobj",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),"a",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 42")))),Object(n.mdx)("p",null,"Здесь, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"obj")," действует как обертка для примитивного значения в свойстве ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"a"),". когда мы передаем ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"foo(..)"),", копия объекта ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"obj")," передана по ссылке и назначена параметру ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"wrapper"),". Теперь мы можем использовать ссылку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"wrapper")," для доступа к общему объекту, и обновить его свойство. После выполнения функции, при запросе ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"obj.a")," будет выведено обновленое значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"42"),"."),Object(n.mdx)("p",null,"Если вы захотите передать ссылку на примитивное значение например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2"),", вы можете просто обернуть его в объект-обертку ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," (подробнее в Главе 3)."),Object(n.mdx)("p",null,"Это ",Object(n.mdx)("em",{parentName:"p"},"является")," настоящим копированием по-ссылке для объекта ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number"),", который ",Object(n.mdx)("em",{parentName:"p"},"будет")," передан функции, но, к несчастью, получение ссылки на общий объект не дает права на изменение общего примитивного значения, как ожидалось:"),Object(n.mdx)("div",{className:"gatsby-highlight","data-language":"js"},Object(n.mdx)("pre",Object.assign({parentName:"div"},{className:"language-js"}),Object(n.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"function")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"("),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token parameter"}),"x"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"{"),"\n\tx ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," x ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"+")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"1"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n\tx",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 3"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token number"}),"2"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"var")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token operator"}),"=")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token keyword"}),"new")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token class-name"}),"Number"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," a ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// эквивалентно `Object(a)`"),"\n\n",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"foo"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";"),"\nconsole",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"."),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token function"}),"log"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),"(")," b ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),")"),Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token punctuation"}),";")," ",Object(n.mdx)("span",Object.assign({parentName:"code"},{className:"token comment"}),"// 2, не 3")))),Object(n.mdx)("p",null,"Проблема в том, что лежащее в основе примитивное значение ",Object(n.mdx)("em",{parentName:"p"},"неизменно")," (то же самое справедливо для ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"String")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Boolean"),"). Если объект ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," содержит примитивное значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2"),", это означает, что объект ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," не может быть изменен для хранения другого значения; вы можете лишь создать новый объект ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," с другим значением."),Object(n.mdx)("p",null,"Когда ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x")," использовано в выражении ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x + 1"),", лежащее в основе примитивное значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2")," распаковано (извлечено) из объекта ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," автоматически, значит строка ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x = x + 1")," очень незаметно меняет ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x")," и вместо ссылки на общий объект ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number"),", переменная ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x")," просто содержит примитивное значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"3")," являющееся результатом математического действия ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2 + 1"),". Таким образом, ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"b")," снаружи все еще ссылается на оригинальный неизмененный/неизменный объект ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," содержащий значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"2"),"."),Object(n.mdx)("p",null,"Вы ",Object(n.mdx)("em",{parentName:"p"},"можете")," добавить свойство поверх объекта ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," (не изменяя его примитивного значения), так вы сможете обменимваться информацией косвенно через дополнительные свойства."),Object(n.mdx)("p",null,"В любом случае, это не является общепринятым; и, возможно, большинство разработчиков не считают это хорошей практикой."),Object(n.mdx)("p",null,"Вместо использования объекта-обертки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," таким способом, возможно, гораздо удобнее использовать обычный, созданный вручную, объект (",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"obj"),"), о котором говорилось в примере ранее. Никто не говорит, что нет разумного использования объекта-обертки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Number")," -- просто возможно предпочтительнее будет использовать примитивное значение в большинстве случаев."),Object(n.mdx)("p",null,"Ссылки достаточно мощные, но иногда они есть там где вам нужно, а иногда они нужны вам там, где их нет. Единственное влияние которое у вас есть при выборе типа копирования по-ссылке или по-значению это выбор типа самого значения, так что вы должны косвенно влиять на поведение присвоения/передачи путем выбора типа значений."),Object(n.mdx)("h2",null,"Обзор"),Object(n.mdx)("p",null,"В JavaScript, массивы ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array")," -- простые коллекции значений любого типа с пронумерованными ячейками. Строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),' что-то "подобное массивам ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),'", но у них есть различия в поведении и нужно быть осторожными при использовании строк как массивов ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"array"),'. Числа в JavaScript включают в себя как "целые" значения так и значения с плавющей точкой.'),Object(n.mdx)("p",null,"Среди примитивнх значений есть некоторые специальные значения."),Object(n.mdx)("p",null,"Тип ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null")," имеет только одно значение: ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null"),", также как и тип ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," имеет только одно значение -- ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),". ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," -- изначальное стандартное значение в любой переменной или свойстве, если никакое другое значение не представлено. Оператор ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"void")," позволяет вам получить значение ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined")," от любого другого значения."),Object(n.mdx)("p",null,"Числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number")," включают в себя несколько специальных значений, например ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN"),' (по идее "Не-Число", но на самом деле более предпочтительно "неправильное число"); бесконечности ',Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"+Infinity")," и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-Infinity"),"; и ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"-0"),"."),Object(n.mdx)("p",null,"Простые примитивные изначения (строки ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"string"),", числа ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"number"),", и т.п.) назначаются/передаются копированием по-значению, но сложные значения (объекты ",Object(n.mdx)("code",Object.assign({parentName:"p"},{className:"language-text"}),"object"),", и т.п.) назначаются/передаются копированием по-ссылке. Ссылки в JS не такие как ссылки/указатели в других языках -- они никогда не указывают на другие переменные/ссылки, только на сами значения."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-posts-you-dont-know-js-types-md-d0ccc5d50adda324bc5e.js.map
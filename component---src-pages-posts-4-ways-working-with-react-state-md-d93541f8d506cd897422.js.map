{"version":3,"sources":["webpack:///./src/pages/posts/4-ways-working-with-react-state.md"],"names":["_frontmatter","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-posts-4-ways-working-with-react-state-md-d93541f8d506cd897422.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"4 подхода для работы с состоянием компонентов в React.\",\n  \"description\": \"Перевод статьи Cory House  Handling State in React: Four Immutable Approaches to Consider.\",\n  \"date\": \"2019-08-24T08:16:49.561Z\",\n  \"categories\": [],\n  \"keywords\": [],\n  \"tags\": [\"react\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`4 подхода для работы с состоянием компонентов в React.`}</h1>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/700/1*xtYEQUYzu5qUKuXg-SGx-g.jpeg\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`Перевод статьи `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/housecor\"\n      }}>{`Cory House`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/\"\n      }}>{`Handling State in React: Four Immutable Approaches to Consider`}</a>{`.`}</p>\n    <p>{`На сегодня, возможно самая сложная тема для понимания в React — это состояние: `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p>{`Представим, у вас есть форма для редактирования пользователем. Распространенный подход: создать один обработчик изменений, чтобы работать с изменением любого поля формы.`}</p>\n    <p>{`Выглядит это примерно так:`}</p>\n    <p>{`О четвертой строке кода стоит поволноваться. Четвертая строка действительно меняет состояние `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`, потому что переменная `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` ссылается на `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`. В `}<inlineCode parentName=\"p\">{`react`}</inlineCode>{` состояние трактуется как неизменное.`}</p>\n    <p>{`Из `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/react-component.html#state\"\n      }}>{`документации React`}</a>{` :`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Никогда не меняйте `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{` напрямую, так как вызов `}<inlineCode parentName=\"p\">{`setState()`}</inlineCode>{`, в итоге, может перезаписать те изменения, что вы сделали. `}<br parentName=\"p\"></br>{`\n`}{`Работайте с состоянием `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{`, как будто оно неизменно.`}</p>\n    </blockquote>\n    <p>{`Почему?`}</p>\n    <p><inlineCode parentName=\"p\">{`setState`}</inlineCode>{` работает под капотом. Это означает, что принудительное изменение состояния `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` может быть перезаписано, когда выполнится `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}{`Если вы объявили метод `}<inlineCode parentName=\"p\">{`shouldComponentUpdate`}</inlineCode>{`, вы не можете использовать проверку на равенство `}<inlineCode parentName=\"p\">{`===`}</inlineCode>{` внутри, т.к. ссылка на объект не изменится. Так что, вышеупомянутый метод может еще и повлиять на производительность.`}<br parentName=\"p\"></br>{`\n`}{`Вообще, примеры выше часто работают нормально, но, чтобы избежать крайних случаев, работайте с состоянием так, как будто оно неизменно.`}</p>\n    <p>{`Есть четыре способа правильной работы с состоянием `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`:`}</p>\n    <h4>{`Способ 1: Object.assign`}</h4>\n    <p><inlineCode parentName=\"p\">{`Object.assign`}</inlineCode>{` создает копию объекта. Первый параметр указывает куда мы будем его копировать, остальные параметры это объекты, которые мы хотим скопировать. Если исправить пример выше, то изменения коснутся строки 3:`}</p>\n    <p>{`В строке 3, я говорю :`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Создай новый пустой объект и добавь туда все свойства из`}<inlineCode parentName=\"p\">{`this.state.user`}</inlineCode>{`. В результате получится отдельная копия объекта `}<inlineCode parentName=\"p\">{`user,`}</inlineCode>{` который хранится в `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}<br parentName=\"p\"></br>{`\n`}{`Теперь, я могу спокойно менять объект в строке 4 — это полностью независимый объект от того, что хранится в `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`Убедитесь, что есть полифилл для метода `}<inlineCode parentName=\"p\">{`Object.assign,`}</inlineCode>{` т.к. он не поддерживается в IE и не транспилируется Babel.`}</p>\n    <p>{`4 источника для ознакомления:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/object-assign\"\n        }}>{`object-assign`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\n        }}>{`The MDN docs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://babeljs.io/docs/usage/polyfill/\"\n        }}>{`Babel Polyfill`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://polyfill.io/v2/docs/features/#Object_assign\"\n        }}>{`Polyfill.io`}</a></li>\n    </ul>\n    <h4>{`Способ 2: Object Spread`}</h4>\n    <p>{`Реализация `}<inlineCode parentName=\"p\">{`Object spread`}</inlineCode>{` на данный момент находится на стадии 3 и эта возможность языка может быть транспилирована Babel.`}<br parentName=\"p\"></br>{`\n`}{`Этот способ более краткий:`}</p>\n    <p>{`В строке 3, я говорю:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Используй все свойства `}<inlineCode parentName=\"p\">{`this.state.user`}</inlineCode>{` для создания нового объекта, затем установи для свойства `}<inlineCode parentName=\"p\">{`[name]`}</inlineCode>{` новое значение из `}<inlineCode parentName=\"p\">{`event.target.value`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`Таким образом, этот метод похож на применение `}<inlineCode parentName=\"p\">{`Object.assign`}</inlineCode>{`, но он имеет 2 преимущества:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Не требуются полифилы, Babel может транспилировать код`}</li>\n      <li parentName=\"ol\">{`Более краткая форма записи`}</li>\n    </ol>\n    <p>{`Можно даже использовать деструктуризацию и уместить все в одну строку:`}</p>\n    <p>{`Я деструктурировал объект `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` для получения ссылки на `}<inlineCode parentName=\"p\">{`event.target`}</inlineCode>{`. Затем, я объявляю, что состояние `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` должно быть копией `}<inlineCode parentName=\"p\">{`this.state.user`}</inlineCode>{` с актуальным значением свойства `}<inlineCode parentName=\"p\">{`[target.name]`}</inlineCode>{`. Получилось лаконичненько, пожалуй это мой любимый способ для обработчиков изменений.`}</p>\n    <p>{`Эти два способа самые распространенные и простые методы поддержки состояния `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` неизменным. Хотите больше полномочий при работе с состоянием? Тогда посмотрите на следующие два способа.`}</p>\n    <h4>{`Способ 3: Immutability Helper`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper\"\n      }}>{`Immutability-helper`}</a>{` — внешняя библиотека для копирования данных без изменения исходных данных. Эта библиотека представлена в документации `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/update.html\"\n      }}>{`React`}</a>{`.`}</p>\n    <p>{`В строке 5:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Я вызываю `}<inlineCode parentName=\"p\">{`merge`}</inlineCode>{` — одну из `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/kolodny/immutability-helper#available-commands\"\n        }}>{`команд`}</a>{` `}<inlineCode parentName=\"p\">{`immutability-helper`}</inlineCode>{`. Как и в случае с `}<inlineCode parentName=\"p\">{`Object.assign`}</inlineCode>{`, первым параметром я передаю целевой объект, а затем определяю свойство, которое будет добавлено и объединено.`}</p>\n    </blockquote>\n    <p>{`Правда, в случае с `}<inlineCode parentName=\"p\">{`immutability-helper`}</inlineCode>{` есть больше возможностей. Здесь используется синтаксис, вдохновленный языком запросов `}<inlineCode parentName=\"p\">{`MongoDB`}</inlineCode>{`, что предоставляет `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper#available-commands\"\n      }}>{`множество мощных способов для работы с неизменяемыми данными`}</a>{`.`}</p>\n    <h4>{`Способ 4: Immutable.js`}</h4>\n    <p>{`Хотите программно применять неизменность? Посмотрите на `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/immutable-js/\"\n      }}>{`immutable.js`}</a>{`. Эта библиотека поддерживает неизменные структуры данных.`}</p>\n    <p>{`Пример с использованием неизменяемой `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{`:`}</p>\n    <p>{`Три шага для использования `}<inlineCode parentName=\"p\">{`immutable`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Импортируем `}<inlineCode parentName=\"li\">{`immutable`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Устанавливаем `}<inlineCode parentName=\"li\">{`state`}</inlineCode>{` в неизменяемый `}<inlineCode parentName=\"li\">{`map`}</inlineCode>{` в `}<inlineCode parentName=\"li\">{`constructor`}</inlineCode></li>\n      <li parentName=\"ol\">{`Используем метод `}<inlineCode parentName=\"li\">{`set`}</inlineCode>{` в обработчике изменений для создания новой копии объекта `}<inlineCode parentName=\"li\">{`user`}</inlineCode></li>\n    </ol>\n    <p>{`Вся красота `}<inlineCode parentName=\"p\">{`immutable.js`}</inlineCode>{` в том, что : если попытаться изменить `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` напрямую, возникнет ошибка. С предыдущими способами, легко об этом забыть, и React не предупредит вас, когда вы попытаетесь изменить `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` напрямую.`}</p>\n    <p>{`Недостатки `}<inlineCode parentName=\"p\">{`immutable.js :`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`Раздуваем бандл. `}<inlineCode parentName=\"li\">{`Immutable.js`}</inlineCode>{` добавляет `}<inlineCode parentName=\"li\">{`57K`}</inlineCode>{` в минифицированном виде. `}<a parentName=\"li\" {...{\n          \"href\": \"https://preactjs.com/\"\n        }}>{`Использование библиотек типа Preact могут заменить React всего`}</a>{` `}<inlineCode parentName=\"li\">{`[3К](https://preactjs.com/)`}</inlineCode>{`, что довольно тяжело принять.`}</li>\n      <li parentName=\"ul\">{`Синтаксис. Вам придется ссылаться на свойства объекта через строки и точно также вызывать методы вместо доступа напрямую. Я предпочитаю использовать `}<inlineCode parentName=\"li\">{`user.name`}</inlineCode>{` чем `}<inlineCode parentName=\"li\">{`user.get('name')`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`YATTL (Yet another thing to learn) — Еще одна вещь для изучения — любому, кто присоединится к вашей команде, потребуется изучить еще один API для доступа и записи данных также как и новые типы данных.`}</li>\n    </ul>\n    <p>{`Парочка альтернатив:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rtfeldman/seamless-immutable\"\n        }}>{`seamless-immutable`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aweary/react-copy-write\"\n        }}>{`react-copy-write`}</a></li>\n    </ul>\n    <h4>{`Предупреждение: Берегитесь Вложенных Объектов!`}</h4>\n    <p>{`Варианты 1 и 2 (`}<inlineCode parentName=\"p\">{`Object.assign Object spread`}</inlineCode>{`) делают только поверхностную копию. Так что, если ваш объект содержит вложенные объекты, они будут скопированы по ссылке, а не по значению. В этом случае если вы измените вложенный объект, вы повлияете и на исходный вложенный объект.`}</p>\n    <p>{`Будьте хирургически аккуратны с тем, что копируете. Не копируйте все подряд. Копируйте объекты,которые изменились. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kolodny/immutability-helper\"\n      }}>{`Immutability-helper`}</a>{` легко это делает. Также как и альтернативы: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mweststrate/immer\"\n      }}>{`immer`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/substantial/updeep\"\n      }}>{`updeep`}</a>{`, или `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities\"\n      }}>{`вот длинный список других вариантов`}</a>{`.`}</p>\n    <p>{`Вы можете поддаться искушению использовать инструменты глубокого слияния, например `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/clone-deep\"\n      }}>{`clone-deep`}</a>{` или `}<a parentName=\"p\" {...{\n        \"href\": \"https://lodash.com/docs/#merge\"\n      }}>{`lodash.merge`}</a>{`, `}<strong parentName=\"p\">{`но избегайте глубокого копирования`}</strong>{`.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Глубокое копирование дорого обходится`}</li>\n      <li parentName=\"ol\">{`Глубокое копирование нерационально ( в отличие от копирования только того, что изменилось)`}</li>\n      <li parentName=\"ol\">{`Глубокое копирование провоцирует необязательный рендеринг, т.к. React думает что все изменилось хотя возможно фактически изменился только определенный дочерний объект.`}</li>\n    </ol>\n    <p>{`Спасибо Дэну Абрамову за рекомендации, которые я указал выше.`}</p>\n    <h4>{`Последний совет: Подумайте над использованием функции setState`}</h4>\n    <p>{`Одна загвоздка может вас зацепить:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`setState()`}</inlineCode>{` не изменяет состояние `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{` немедленно, но создает ожидание перехода состояния. Попытка доступа к `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{` после вызова этого метода, потенциально может вернуть существующее значение.`}</p>\n    </blockquote>\n    <p>{`Как только запустится вызов `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{`, код вроде этого приведет к багу:`}</p>\n    <p>{`Если вы хотите запустить код после завершения вызова `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{`, используйте колбэк `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{`:`}</p>\n    <h4>{`Мой выбор`}</h4>\n    <p>{`Я предпочитаю простоту и легкость второго варианта: `}<inlineCode parentName=\"p\">{`Object spread`}</inlineCode>{`. Он не требует полифиллов или сторонних библиотек, я могу объявлять обработчик изменений в одну строку и могу позаботиться только о том, что изменяется. Что касается работы с вложенными объектами я бы предпочел `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mweststrate/immer\"\n      }}>{`Immer`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://pluralsight.com/author/cory-house\"\n      }}><img parentName=\"a\" {...{\n          \"src\": \"https://cdn-images-1.medium.com/max/800/1*xhJGZsL0sh-k1BpESYirNg.png\",\n          \"alt\": null\n        }}></img></a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/housecor\"\n      }}>{`Cory House`}</a>{` автор `}<a parentName=\"p\" {...{\n        \"href\": \"http://pluralsight.com/author/cory-house\"\n      }}>{`многих курсов JavaScript, React, программированию, .NET, и других на Pluralsight`}</a>{`. Он является главным консультантом `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.reactjsconsulting.com/\"\n      }}>{`reactjsconsulting.com`}</a>{`, архитектором программного обеспечения VinSolutions, a Microsoft MVP, и обучает разработчиков программного обеспечения по всему миру фронтенду и чистому кодингу. Следите за его твитами о фронтенд разработке здесь: `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.twitter.com/housecor\"\n      }}>{`@housecor`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
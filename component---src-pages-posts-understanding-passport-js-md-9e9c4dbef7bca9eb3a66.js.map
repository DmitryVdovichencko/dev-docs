{"version":3,"sources":["webpack:///./src/pages/posts/understanding-passport-js.md"],"names":["_frontmatter","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-posts-understanding-passport-js-md-9e9c4dbef7bca9eb3a66.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Разбираемся с процессом авторизации в passport.js\",\n  \"date\": \"2020-10-04\",\n  \"tags\": [\"js\"]\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Разбираемся с процессом авторизации в `}<inlineCode parentName=\"h1\">{`passport.js`}</inlineCode></h1>\n    <p>{`Перевод статьи `}<a parentName=\"p\" {...{\n        \"href\": \"http://toon.io/understanding-passportjs-authentication-flow/\"\n      }}>{`Understanding passport.js authentication flow`}</a></p>\n    <p>{`Passport.js - миддлвар для авторизации (позволяющий пользователям логиниться), кооторый может быть полностью кастомизирован и отлично работает в связке с connect/express.`}</p>\n    <p>{`Он является довольно гибким в том смысле, что позволяет использовать разные стратегии авторизации (допустим через Twitter, или с помощью собственной базы данных - за счет установки отдельных модулей и их комбинирования), а также `}<strong parentName=\"p\">{`passport.js`}</strong>{` позволяет определить маршрут или вывод результата авторизации.`}</p>\n    <p>{`Стратегия `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Local Strategy`}</inlineCode></strong>{` позволяет пользователям авторизоваться, используя базу данных приложения. Для этих случаев есть несколько отличных примеров.`}</p>\n    <p>{`В этой статье, мы разберемся с процессом авторизации, а в следующей разберем несколько практических сценариев использования `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passportjs`}</inlineCode></strong>{`.`}</p>\n    <h2>{`Основные моменты при использовании `}<inlineCode parentName=\"h2\">{`passport.js`}</inlineCode></h2>\n    <p>{`Есть 3 момента при использовании `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.js`}</inlineCode></strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Импортируем модуль и вызываем методы `}<inlineCode parentName=\"li\">{`passport.initialize()`}</inlineCode>{` и `}<inlineCode parentName=\"li\">{`passport.session()`}</inlineCode>{` для миддлвары express.`}</li>\n      <li parentName=\"ol\">{`Настраиваем для `}<inlineCode parentName=\"li\">{`passport`}</inlineCode>{` хотя бы одну стратегию `}<inlineCode parentName=\"li\">{`Strategy`}</inlineCode>{` и подключаем методы `}<inlineCode parentName=\"li\">{`passport`}</inlineCode>{` `}<inlineCode parentName=\"li\">{`serializeUser`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`deserializeUser`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Определяем маршрут, в котором будем использовать миддлвар `}<inlineCode parentName=\"li\">{`passport.authenticate`}</inlineCode>{` непосредственно для авторизации пользователя.`}</li>\n    </ol>\n    <p>{`Примеры в документации достаточно ясно показывают использование этих методов. Поэтому,подробнее здесь мы их не рассматриваем.`}</p>\n    <h2>{`Процесс запроса на авторизацию`}</h2>\n    <p>{`Итак, если мы верно настроили `}<inlineCode parentName=\"p\">{`passportjs`}</inlineCode>{`, согласно примеру выше, то при попытке пользователя авторизоваться по маршруту `}<a parentName=\"p\" {...{\n        \"href\": \"/dev-docs/login\"\n      }}>{`/login`}</a>{`, произойдет следующее:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Когда пользователь отправит данные формы авторизации, `}<inlineCode parentName=\"li\">{`POST`}</inlineCode>{` запрос к маршруту `}<a parentName=\"li\" {...{\n          \"href\": \"/dev-docs/login\"\n        }}>{`/login`}</a>{` вызовет выполнение мидлвар `}<inlineCode parentName=\"li\">{`passport.authenticate`}</inlineCode>{`, который мы подключили.\n`}</li>\n      <li parentName=\"ul\">{`Поскольку миддлвар авторизации для этого маршрута настроен на использование стратегии `}<inlineCode parentName=\"li\">{`LocalStrategy`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`passport`}</inlineCode>{` вызовет нашу реализацию `}<inlineCode parentName=\"li\">{`LocalStrategy`}</inlineCode>{`.\n`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Passport`}</inlineCode>{` возьмет из запроса `}<inlineCode parentName=\"li\">{`req.body.username`}</inlineCode>{` и `}<inlineCode parentName=\"li\">{`req.body.password`}</inlineCode>{` и передаст их нашей функции проверки авторизации в `}<inlineCode parentName=\"li\">{`LocalStrategy`}</inlineCode>{`.\n`}</li>\n      <li parentName=\"ul\">{`Теперь займемся своими делами: загрузим данные пользователя из базы данных и проверим совпадают ли пароли.\n`}</li>\n    </ul>\n    <p>{`В случае если при взаимодействии с базой данных сработает ошибка, нам нужно передать ее методу `}<inlineCode parentName=\"p\">{`done(err)`}</inlineCode>{`. `}</p>\n    <p>{`Когда мы не можем найти пользователя или пароли не совпали, мы вызываем `}<inlineCode parentName=\"p\">{`done(null, false)`}</inlineCode>{`. `}</p>\n    <p>{`Если же все прошло хорошо, и мы хотим залогинить пользователя, вызываем `}<inlineCode parentName=\"p\">{`done(null, user)`}</inlineCode>{`.`}</p>\n    <p>{`Вызов `}<inlineCode parentName=\"p\">{`done`}</inlineCode>{` позволит последовательности авторизации перепрыгнуть обратно в `}<inlineCode parentName=\"p\">{`passport.authenticate`}</inlineCode>{`. Передаются ошибка `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` и объект с дополнительной информацией (если он был определен).`}</p>\n    <p>{`Если объект `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` был передан, миддлвар  вызовет `}<inlineCode parentName=\"p\">{`req.login`}</inlineCode>{` (метод `}<inlineCode parentName=\"p\">{`passport`}</inlineCode>{`, добавленный к запросу `}<inlineCode parentName=\"p\">{`request`}</inlineCode>{`).`}</p>\n    <p>{`Это приведет к вызову  метода `}<inlineCode parentName=\"p\">{`passport.serializeUser`}</inlineCode>{`, который мы определили ранее. `}</p>\n    <p>{`Этот метод имеет доступ к объекту `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{`, который мы передали в миддлвар.`}</p>\n    <p>{`Его работа заключается в том, чтобы определить, какие данные объекта `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` должны быть записаны в сессии `}<inlineCode parentName=\"p\">{`session`}</inlineCode>{`. `}</p>\n    <p>{`Результат выполнения метода `}<inlineCode parentName=\"p\">{`serializeUser`}</inlineCode>{` прикрепляется к сессии: `}</p>\n    <pre {...{\n      \"className\": \"shiki\",\n      \"style\": {\n        \"backgroundColor\": \"#0F111A\"\n      }\n    }}><code parentName=\"pre\"><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#8F93A2\"\n          }\n        }}>{`req`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#89DDFF\"\n          }\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#8F93A2\"\n          }\n        }}>{`session`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#89DDFF\"\n          }\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#8F93A2\"\n          }\n        }}>{`passport`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#89DDFF\"\n          }\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#8F93A2\"\n          }\n        }}>{`user`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#FFFFFF\"\n          }\n        }}>{` `}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#C792EA\"\n          }\n        }}>{`=`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#FFFFFF\"\n          }\n        }}>{` `}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#89DDFF\"\n          }\n        }}>{`{`}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#FFFFFF\"\n          }\n        }}>{` `}</span><span parentName=\"code\" {...{\n          \"style\": {\n            \"color\": \"#464B5D\"\n          }\n        }}>{`// our serialised user object // }.`}</span></code></pre>\n    <p>{`Результат также прикреплен к запросу: `}<inlineCode parentName=\"p\">{`req.user`}</inlineCode>{`.`}</p>\n    <p>{`Когда все это выполнено, вызывается наш обработчик запросов `}<inlineCode parentName=\"p\">{`requestHandler`}</inlineCode>{`. В данном примере поьзоватеь будет перенаправлен на стартовую страницу.`}</p>\n    <h2>{`Последовательность последующих запросов авторизации`}</h2>\n    <p>{`При последующих запросах, произодет следующее:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Express`}</strong>{` загрузит данные сессии и прикрепит их к запросу `}<inlineCode parentName=\"p\">{`req`}</inlineCode>{`. Так как `}<strong parentName=\"p\">{`passport`}</strong>{` записал выбранные данные пользователя в сессию, сериализованный объект `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` можно будет найти в `}<inlineCode parentName=\"p\">{`req.session.passport.user`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Основной миддлвар `}<inlineCode parentName=\"p\">{`passport`}</inlineCode>{`, который мы настроили (`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.initialize`}</inlineCode></strong>{`) будет вызван при запросе, он найдет `}<inlineCode parentName=\"p\">{`passport.user`}</inlineCode>{` прикрепленный к сессии. Если он отсутствует (пользователь еще не авторизовался), то будет создан в следующем виде: `}<inlineCode parentName=\"p\">{`req.passport.user = {}`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Затем, будет вызван `}<inlineCode parentName=\"p\">{`passport.session`}</inlineCode>{`. Этот миддлвар - часть стратегии `}<inlineCode parentName=\"p\">{`Passport Strategy`}</inlineCode>{`, вызываемой при каждом запросе. Если он найдет сериализованный объект пользователя `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` в сессии, он решит, что запрос `}<inlineCode parentName=\"p\">{`request`}</inlineCode>{` авторизован.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Миддлвар `}<inlineCode parentName=\"p\">{`passport.session`}</inlineCode>{` вызовет `}<inlineCode parentName=\"p\">{`passport.deserializeUser`}</inlineCode>{`, который мы добавили ранее. Тем самым, прикрепляя загруженный объект `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` к запросу в виде `}<inlineCode parentName=\"p\">{`req.user`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <h2>{`Итого: все методы и мидллвары `}<inlineCode parentName=\"h2\">{`passport`}</inlineCode></h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.initialize`}</inlineCode></strong>{` миддлвар вызывается на каждый запрос. Убеждается что сессия содержит `}<inlineCode parentName=\"p\">{`passport.user objec t`}</inlineCode>{`, который может быть пустым.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.session`}</inlineCode></strong>{` миддлвар - часть стратегии `}<inlineCode parentName=\"p\">{`Passport Strategy`}</inlineCode>{`: загружает объект пользователя `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` в `}<inlineCode parentName=\"p\">{`req.user`}</inlineCode>{` , если сериализованный объект найден на сервере.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.deserializeUser`}</inlineCode></strong>{` вызывается на каждый запрос из миддлвара `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.session`}</inlineCode></strong>{`. Это позволяет нам подгружать дополнительную информацию поьзователя при каждом запросе. Этот объект пользователя `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` будет прикреплен к запросу в виде `}<inlineCode parentName=\"p\">{`req.user`}</inlineCode>{`, чтобы можно было получить к нему доступ при обработке запросов.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Наша локальная стратегия `}<inlineCode parentName=\"p\">{`Local Strategy`}</inlineCode>{` вызывается только при использовании маршрута который содержит миддлвар `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.authenticate`}</inlineCode></strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Только при авторизации вызывается `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`passport.serializeUser`}</inlineCode></strong>{` позволяя нам определить какая информция пользователя будет записана в сессии.`}</p>\n      </li>\n    </ol>\n    <h4>{`Методы `}<inlineCode parentName=\"h4\">{`passport`}</inlineCode>{` прикрепленные к запросу  `}<inlineCode parentName=\"h4\">{`request`}</inlineCode></h4>\n    <p>{`Ну и наконец обзор методов `}<inlineCode parentName=\"p\">{`passport`}</inlineCode>{` доступных внутри обработчиков запросов:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`req.login()`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`req.logout()`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`req.isAuthenticated()`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`req.isUnAuthenticated()`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}